{"ast":null,"code":"import { BehaviorSubject, Subject, debounceTime, delay, of, switchMap, tap } from 'rxjs';\nimport { productListData } from '../data/data/ecommerce/product-list';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nconst compare = (v1, v2) => v1 < v2 ? -1 : v1 > v2 ? 1 : 0;\nfunction sort(products, column, direction) {\n  if (direction === '' || column === '') {\n    return products;\n  } else {\n    return [...products].sort((a, b) => {\n      const res = compare(a[column], b[column]);\n      return direction === 'asc' ? res : -res;\n    });\n  }\n}\nfunction matches(product, term, pipe) {\n  return product.name.toLowerCase().includes(term.toLowerCase()) || product.category.toLowerCase().includes(term.toLowerCase()) || product.category.toLowerCase().includes(term.toLowerCase()) || product.sku.toLowerCase().includes(term.toLowerCase()) || product.status.toLowerCase().includes(term.toLowerCase()) || pipe.transform(product.price).includes(term) || pipe.transform(product.qty).includes(term);\n}\nexport class ProductListService {\n  constructor(pipe) {\n    this.pipe = pipe;\n    this._loading$ = new BehaviorSubject(true);\n    this._search$ = new Subject();\n    this._productList$ = new BehaviorSubject([]);\n    this._total$ = new BehaviorSubject(0);\n    this._product = {\n      page: 1,\n      pageSize: 10,\n      searchTerm: '',\n      sortColumn: '',\n      sortDirection: ''\n    };\n    this._search$.pipe(tap(() => this._loading$.next(true)), debounceTime(200), switchMap(() => this._search()), delay(200), tap(() => this._loading$.next(false))).subscribe(result => {\n      this._productList$.next(result.products);\n      this._total$.next(result.total);\n    });\n    this._search$.next();\n  }\n  get productList$() {\n    return this._productList$.asObservable();\n  }\n  get total$() {\n    return this._total$.asObservable();\n  }\n  get loading$() {\n    return this._loading$.asObservable();\n  }\n  get page() {\n    return this._product.page;\n  }\n  get pageSize() {\n    return this._product.pageSize;\n  }\n  get searchTerm() {\n    return this._product.searchTerm;\n  }\n  set page(page) {\n    this._set({\n      page\n    });\n  }\n  set pageSize(pageSize) {\n    this._set({\n      pageSize\n    });\n  }\n  set searchTerm(searchTerm) {\n    this._set({\n      searchTerm\n    });\n  }\n  set sortColumn(sortColumn) {\n    this._set({\n      sortColumn\n    });\n  }\n  set sortDirection(sortDirection) {\n    this._set({\n      sortDirection\n    });\n  }\n  _set(patch) {\n    Object.assign(this._product, patch);\n    this._search$.next();\n  }\n  _search() {\n    const {\n      sortColumn,\n      sortDirection,\n      pageSize,\n      page,\n      searchTerm\n    } = this._product;\n    // 1. sort\n    let products = sort(productListData, sortColumn, sortDirection);\n    // 2. filter\n    products = products.filter(list => matches(list, searchTerm, this.pipe));\n    const total = products.length;\n    // 3. paginate\n    products = products.slice((page - 1) * pageSize, (page - 1) * pageSize + pageSize);\n    return of({\n      products,\n      total\n    });\n  }\n  static #_ = this.ɵfac = function ProductListService_Factory(t) {\n    return new (t || ProductListService)(i0.ɵɵinject(i1.DecimalPipe));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductListService,\n    factory: ProductListService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","Subject","debounceTime","delay","of","switchMap","tap","productListData","compare","v1","v2","sort","products","column","direction","a","b","res","matches","product","term","pipe","name","toLowerCase","includes","category","sku","status","transform","price","qty","ProductListService","constructor","_loading$","_search$","_productList$","_total$","_product","page","pageSize","searchTerm","sortColumn","sortDirection","next","_search","subscribe","result","total","productList$","asObservable","total$","loading$","_set","patch","Object","assign","filter","list","length","slice","_","i0","ɵɵinject","i1","DecimalPipe","_2","factory","ɵfac","providedIn"],"sources":["C:\\Repository\\Jupiter\\juno-app\\src\\app\\shared\\services\\product-list.service.ts"],"sourcesContent":["import { DecimalPipe } from '@angular/common';\nimport { Injectable, PipeTransform } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject, debounceTime, delay, of, switchMap, tap } from 'rxjs';\nimport { productListData, productListInterface } from '../data/data/ecommerce/product-list';\nimport { SortColumn, SortDirection } from '../directive/product-list-sortable.directive';\n\ninterface SearchResult {\n\tproducts: productListInterface[];\n\ttotal: number;\n  }\n  \ninterface State {\n  page: number;\n  pageSize: number;\n  searchTerm: string;\n  sortColumn: SortColumn;\n  sortDirection: SortDirection;\n}\n\nconst compare = (v1: string | number, v2: string | number) => (v1 < v2 ? -1 : v1 > v2 ? 1 : 0);\n\nfunction sort(products: productListInterface[], column: SortColumn, direction: string): productListInterface[] {\n  if (direction === '' || column === '') {\n    return products;\n  } else {\n    return [...products].sort((a, b) => {\n      const res = compare(a[column], b[column]);\n      return direction === 'asc' ? res : -res;\n    });\n  }\n}\n\n\nfunction matches(product: productListInterface, term: string, pipe: PipeTransform) {\n  return (\n    product.name.toLowerCase().includes(term.toLowerCase())  ||\n    product.category.toLowerCase().includes(term.toLowerCase())  ||\n    product.category.toLowerCase().includes(term.toLowerCase())  ||\n    product.sku.toLowerCase().includes(term.toLowerCase())  ||\n    product.status.toLowerCase().includes(term.toLowerCase())  ||\n\tpipe.transform(product.price).includes(term) ||\n\tpipe.transform(product.qty).includes(term) \n  )\n    \n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ProductListService {\n\n  private _loading$ = new BehaviorSubject<boolean>(true);\n  private _search$ = new Subject<void>();\n  private _productList$ = new BehaviorSubject<productListInterface[]>([]);\n  private _total$ = new BehaviorSubject<number>(0);\n\n  private _product: State = {\n    page: 1,\n    pageSize: 10,\n    searchTerm: '',\n    sortColumn: '',\n    sortDirection: '',\n  };\n\n  constructor(private pipe: DecimalPipe) {\n    this._search$\n      .pipe(\n        tap(() => this._loading$.next(true)),\n        debounceTime(200),\n        switchMap(() => this._search()),\n        delay(200),\n        tap(() => this._loading$.next(false)),\n      )\n      .subscribe((result) => {\n        this._productList$.next(result.products);\n        this._total$.next(result.total);\n      });\n    this._search$.next();\n  }\n\n  get productList$() {\n\t\treturn this._productList$.asObservable();\n\t}\n\tget total$() {\n\t\treturn this._total$.asObservable();\n\t}\n\tget loading$() {\n\t\treturn this._loading$.asObservable();\n\t}\n\tget page() {\n\t\treturn this._product.page;\n\t}\n\tget pageSize() {\n\t\treturn this._product.pageSize;\n\t}\n\tget searchTerm() {\n\t\treturn this._product.searchTerm;\n\t}\n\n\tset page(page: number) {\n\t\tthis._set({ page });\n\t}\n\tset pageSize(pageSize: number) {\n\t\tthis._set({ pageSize });\n\t}\n\tset searchTerm(searchTerm: string) {\n\t\tthis._set({ searchTerm });\n\t}\n\tset sortColumn(sortColumn: SortColumn) {\n\t\tthis._set({ sortColumn });\n\t}\n\tset sortDirection(sortDirection: SortDirection) {\n\t\tthis._set({ sortDirection });\n\t}\n\n\tprivate _set(patch: Partial<State>) {\n\t\tObject.assign(this._product, patch);\n\t\tthis._search$.next();\n\t}\n\n\tprivate _search(): Observable<SearchResult> {\n\t\tconst { sortColumn, sortDirection, pageSize, page, searchTerm } = this._product;\n\n\t\t// 1. sort\n\t\tlet products = sort(productListData, sortColumn, sortDirection);\n\n\t\t// 2. filter\n\t\tproducts = products.filter((list) => matches(list, searchTerm, this.pipe));\n\t\tconst total = products.length;\n\n\t\t// 3. paginate\n\t\tproducts = products.slice((page - 1) * pageSize, (page - 1) * pageSize + pageSize);\n\t\treturn of({ products, total });\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}