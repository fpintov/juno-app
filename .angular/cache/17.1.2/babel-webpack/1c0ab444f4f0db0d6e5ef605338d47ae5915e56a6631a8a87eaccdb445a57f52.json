{"ast":null,"code":"import * as data from '../../../../../shared/data/data/forms/chechbox-radio';\nimport * as i0 from \"@angular/core\";\nfunction RadioToggleButtonsComponent_For_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"input\", 4);\n    i0.ɵɵelementStart(1, \"label\", 5);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"id\", item_r1.id);\n    i0.ɵɵproperty(\"checked\", item_r1.active)(\"disabled\", item_r1.disable);\n    i0.ɵɵadvance();\n    i0.ɵɵpropertyInterpolate(\"for\", item_r1.id);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(item_r1.text);\n  }\n}\nexport class RadioToggleButtonsComponent {\n  constructor() {\n    this.RadioToggleButtons = data.RadioToggleButtons;\n  }\n  static #_ = this.ɵfac = function RadioToggleButtonsComponent_Factory(t) {\n    return new (t || RadioToggleButtonsComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RadioToggleButtonsComponent,\n    selectors: [[\"app-radio-toggle-buttons\"]],\n    decls: 12,\n    vars: 0,\n    consts: [[1, \"card\"], [1, \"card-header\"], [1, \"f-m-light\", \"mt-1\"], [1, \"card-body\", \"common-flex\", \"main-radio-toggle\"], [\"type\", \"radio\", \"name\", \"options\", 1, \"btn-check\", \"radio-light-secondary\", 3, \"id\", \"checked\", \"disabled\"], [1, \"btn\", \"list-light-secondary\", 3, \"for\"]],\n    template: function RadioToggleButtonsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h4\");\n        i0.ɵɵtext(3, \"Radio toggle buttons\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"p\", 2);\n        i0.ɵɵtext(5, \" The choice between these two approaches will depend on the type of toggle you are creating, and whether or not the toggle will make sense to users when announced as a checkbox or as an actual button. \");\n        i0.ɵɵelementStart(6, \"code\");\n        i0.ɵɵtext(7, \"[any one selected]\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(8, \". \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(9, \"div\", 3);\n        i0.ɵɵrepeaterCreate(10, RadioToggleButtonsComponent_For_11_Template, 3, 5, null, null, i0.ɵɵrepeaterTrackByIdentity);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(10);\n        i0.ɵɵrepeater(ctx.RadioToggleButtons);\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["data","i0","ɵɵelement","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵpropertyInterpolate","item_r1","id","ɵɵproperty","active","disable","ɵɵadvance","ɵɵtextInterpolate","text","RadioToggleButtonsComponent","constructor","RadioToggleButtons","_","_2","selectors","decls","vars","consts","template","RadioToggleButtonsComponent_Template","rf","ctx","ɵɵrepeaterCreate","RadioToggleButtonsComponent_For_11_Template","ɵɵrepeaterTrackByIdentity","ɵɵrepeater"],"sources":["C:\\Repository\\Jupiter\\juno-app\\src\\app\\components\\forms\\form-controls\\checkbox-radio\\radio-toggle-buttons\\radio-toggle-buttons.component.ts","C:\\Repository\\Jupiter\\juno-app\\src\\app\\components\\forms\\form-controls\\checkbox-radio\\radio-toggle-buttons\\radio-toggle-buttons.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport * as data from '../../../../../shared/data/data/forms/chechbox-radio';\n\n@Component({\n  selector: 'app-radio-toggle-buttons',\n  templateUrl: './radio-toggle-buttons.component.html',\n  styleUrls: ['./radio-toggle-buttons.component.scss']\n})\n\nexport class RadioToggleButtonsComponent {\n\n  public RadioToggleButtons = data.RadioToggleButtons;\n\n}\n","<div class=\"card\">\n  <div class=\"card-header\">\n    <h4>Radio toggle buttons</h4>\n    <p class=\"f-m-light mt-1\">\n      The choice between these two approaches will depend on the type of toggle you are creating, and whether or not the\n      toggle will make sense to users when announced as a checkbox or as an actual button.\n      <code>[any one selected]</code>.\n    </p>\n  </div>\n  <div class=\"card-body common-flex main-radio-toggle\">\n    @for (item of RadioToggleButtons; track item) {\n    <input class=\"btn-check radio-light-secondary\" id=\"{{item.id}}\" type=\"radio\" name=\"options\" [checked]=\"item.active\"\n      [disabled]=\"item.disable\">\n    <label class=\"btn list-light-secondary\" for=\"{{item.id}}\">{{item.text}}</label>\n    }\n  </div>\n</div>"],"mappings":"AACA,OAAO,KAAKA,IAAI,MAAM,sDAAsD;;;;ICUxEC,EAAA,CAAAC,SAAA,eAC4B;IAC5BD,EAAA,CAAAE,cAAA,eAA0D;IAAAF,EAAA,CAAAG,MAAA,GAAa;IAAAH,EAAA,CAAAI,YAAA,EAAQ;;;;IAFhCJ,EAAA,CAAAK,qBAAA,OAAAC,OAAA,CAAAC,EAAA,CAAgB;IAA6BP,EAAA,CAAAQ,UAAA,YAAAF,OAAA,CAAAG,MAAA,CAAuB,aAAAH,OAAA,CAAAI,OAAA;IAE3EV,EAAA,CAAAW,SAAA,EAAiB;IAAjBX,EAAA,CAAAK,qBAAA,QAAAC,OAAA,CAAAC,EAAA,CAAiB;IAACP,EAAA,CAAAW,SAAA,EAAa;IAAbX,EAAA,CAAAY,iBAAA,CAAAN,OAAA,CAAAO,IAAA,CAAa;;;ADJ3E,OAAM,MAAOC,2BAA2B;EANxCC,YAAA;IAQS,KAAAC,kBAAkB,GAAGjB,IAAI,CAACiB,kBAAkB;;EAEpD,QAAAC,CAAA,G;qBAJYH,2BAA2B;EAAA;EAAA,QAAAI,EAAA,G;UAA3BJ,2BAA2B;IAAAK,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,qCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCTxCzB,EAAA,CAAAE,cAAA,aAAkB;QAEVF,EAAA,CAAAG,MAAA,2BAAoB;QAAAH,EAAA,CAAAI,YAAA,EAAK;QAC7BJ,EAAA,CAAAE,cAAA,WAA0B;QACxBF,EAAA,CAAAG,MAAA,gNAEA;QAAAH,EAAA,CAAAE,cAAA,WAAM;QAAAF,EAAA,CAAAG,MAAA,yBAAkB;QAAAH,EAAA,CAAAI,YAAA,EAAO;QAAAJ,EAAA,CAAAG,MAAA,SACjC;QAAAH,EAAA,CAAAI,YAAA,EAAI;QAENJ,EAAA,CAAAE,cAAA,aAAqD;QACnDF,EAAA,CAAA2B,gBAAA,KAAAC,2CAAA,oBAAA5B,EAAA,CAAA6B,yBAAA,CAIC;QACH7B,EAAA,CAAAI,YAAA,EAAM;;;QALJJ,EAAA,CAAAW,SAAA,IAIC;QAJDX,EAAA,CAAA8B,UAAA,CAAAJ,GAAA,CAAAV,kBAAA,CAIC"},"metadata":{},"sourceType":"module","externalDependencies":[]}