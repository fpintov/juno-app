{"ast":null,"code":"import * as data from '../../../../../../shared/data/data/forms/form-widgets';\nimport { Subject, debounceTime, distinctUntilChanged, filter, merge, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i2 from \"@angular/forms\";\nconst _c0 = [\"instance\"];\nexport class OpenOnFocusComponent {\n  constructor() {\n    this.states = data.state;\n    this.focus$ = new Subject();\n    this.click$ = new Subject();\n    this.search = text$ => {\n      const debouncedText$ = text$.pipe(debounceTime(200), distinctUntilChanged());\n      const clickWithClosedPopup$ = this.click$.pipe(filter(() => this.instance.isPopupOpen()));\n      const inputFocus$ = this.focus$;\n      return merge(debouncedText$, inputFocus$, clickWithClosedPopup$).pipe(map(term => (term === '' ? this.states : this.states.filter(v => v.toLowerCase().indexOf(term.toLowerCase()) > -1)).slice(0, 10)));\n    };\n  }\n  static #_ = this.ɵfac = function OpenOnFocusComponent_Factory(t) {\n    return new (t || OpenOnFocusComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: OpenOnFocusComponent,\n    selectors: [[\"app-open-on-focus\"]],\n    viewQuery: function OpenOnFocusComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.instance = _t.first);\n      }\n    },\n    decls: 12,\n    vars: 1,\n    consts: [[1, \"card\"], [1, \"card-header\"], [1, \"f-m-light\", \"mt-1\"], [1, \"card-body\"], [\"id\", \"prefetch\"], [1, \"theme-form\"], [\"type\", \"text\", \"placeholder\", \"Search For a state\", 1, \"typeahead\", \"form-control\", 3, \"ngbTypeahead\", \"focus\", \"click\"], [\"instance\", \"ngbTypeahead\"]],\n    template: function OpenOnFocusComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h4\");\n        i0.ɵɵtext(3, \"Open on focus\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"p\", 2);\n        i0.ɵɵtext(5, \"It is possible to get the focus events with the current input value to emit results on focus with a great flexibility. In this simple example, a search is done no matter the content of the input: \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"div\", 3)(7, \"div\", 4)(8, \"form\", 5)(9, \"div\")(10, \"input\", 6, 7);\n        i0.ɵɵlistener(\"focus\", function OpenOnFocusComponent_Template_input_focus_10_listener($event) {\n          return ctx.focus$.next($event.target.value);\n        })(\"click\", function OpenOnFocusComponent_Template_input_click_10_listener($event) {\n          return ctx.click$.next($event.target.value);\n        });\n        i0.ɵɵelementEnd()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngbTypeahead\", ctx.search);\n      }\n    },\n    dependencies: [i1.NgbTypeahead, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.NgForm],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["data","Subject","debounceTime","distinctUntilChanged","filter","merge","map","OpenOnFocusComponent","constructor","states","state","focus$","click$","search","text$","debouncedText$","pipe","clickWithClosedPopup$","instance","isPopupOpen","inputFocus$","term","v","toLowerCase","indexOf","slice","_","_2","selectors","viewQuery","OpenOnFocusComponent_Query","rf","ctx","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","OpenOnFocusComponent_Template_input_focus_10_listener","$event","next","target","value","OpenOnFocusComponent_Template_input_click_10_listener","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Repository\\Jupiter\\juno-app\\src\\app\\components\\forms\\form-widgets\\touchspin\\typeahead\\open-on-focus\\open-on-focus.component.ts","C:\\Repository\\Jupiter\\juno-app\\src\\app\\components\\forms\\form-widgets\\touchspin\\typeahead\\open-on-focus\\open-on-focus.component.html"],"sourcesContent":["import { Component, ViewChild } from '@angular/core';\nimport * as data from '../../../../../../shared/data/data/forms/form-widgets';\nimport { NgbTypeahead } from '@ng-bootstrap/ng-bootstrap';\nimport { Subject, OperatorFunction, Observable, debounceTime, distinctUntilChanged, filter, merge, map } from 'rxjs';\n\n@Component({\n  selector: 'app-open-on-focus',\n  templateUrl: './open-on-focus.component.html',\n  styleUrls: ['./open-on-focus.component.scss']\n})\n\nexport class OpenOnFocusComponent {\n\n  public states = data.state;\n\n\n  @ViewChild('instance', {static : true}) instance : NgbTypeahead;\n  focus$ = new Subject<string>();\n  click$ = new Subject<string>();\n\n  search: OperatorFunction<string, readonly string[]> = (text$: Observable<string>) => {\n    const debouncedText$ = text$.pipe(debounceTime(200), distinctUntilChanged());\n    const clickWithClosedPopup$ = this.click$.pipe(filter(() => this.instance.isPopupOpen()));\n    const inputFocus$ = this.focus$;\n\n    return merge(debouncedText$, inputFocus$, clickWithClosedPopup$).pipe(\n      map((term) => \n      (term === '' ? this.states : this.states.filter((v) => v.toLowerCase().indexOf(term.toLowerCase()) > -1)).slice(0,10))\n    )\n  }\n\n}\n","<div class=\"card\">\n    <div class=\"card-header\">\n        <h4>Open on focus</h4>\n        <p class=\"f-m-light mt-1\">It is possible to get the focus events with the current input value to emit results on\n            focus with a great flexibility. In this simple example, a search is done no matter the content of the input:\n        </p>\n    </div>  \n    <div class=\"card-body\">\n        <div id=\"prefetch\">\n            <form class=\"theme-form\">\n                <div>\n                    <input class=\"typeahead form-control\" type=\"text\" placeholder=\"Search For a state\"\n                        [ngbTypeahead]=\"search\" (focus)=\"focus$.next($any($event).target.value)\"\n                        (click)=\"click$.next($any($event).target.value)\" #instance=\"ngbTypeahead\">\n                </div>\n            </form>\n        </div>\n    </div>\n</div>\n"],"mappings":"AACA,OAAO,KAAKA,IAAI,MAAM,uDAAuD;AAE7E,SAASC,OAAO,EAAgCC,YAAY,EAAEC,oBAAoB,EAAEC,MAAM,EAAEC,KAAK,EAAEC,GAAG,QAAQ,MAAM;;;;;AAQpH,OAAM,MAAOC,oBAAoB;EANjCC,YAAA;IAQS,KAAAC,MAAM,GAAGT,IAAI,CAACU,KAAK;IAI1B,KAAAC,MAAM,GAAG,IAAIV,OAAO,EAAU;IAC9B,KAAAW,MAAM,GAAG,IAAIX,OAAO,EAAU;IAE9B,KAAAY,MAAM,GAAiDC,KAAyB,IAAI;MAClF,MAAMC,cAAc,GAAGD,KAAK,CAACE,IAAI,CAACd,YAAY,CAAC,GAAG,CAAC,EAAEC,oBAAoB,EAAE,CAAC;MAC5E,MAAMc,qBAAqB,GAAG,IAAI,CAACL,MAAM,CAACI,IAAI,CAACZ,MAAM,CAAC,MAAM,IAAI,CAACc,QAAQ,CAACC,WAAW,EAAE,CAAC,CAAC;MACzF,MAAMC,WAAW,GAAG,IAAI,CAACT,MAAM;MAE/B,OAAON,KAAK,CAACU,cAAc,EAAEK,WAAW,EAAEH,qBAAqB,CAAC,CAACD,IAAI,CACnEV,GAAG,CAAEe,IAAI,IACT,CAACA,IAAI,KAAK,EAAE,GAAG,IAAI,CAACZ,MAAM,GAAG,IAAI,CAACA,MAAM,CAACL,MAAM,CAAEkB,CAAC,IAAKA,CAAC,CAACC,WAAW,EAAE,CAACC,OAAO,CAACH,IAAI,CAACE,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAEE,KAAK,CAAC,CAAC,EAAC,EAAE,CAAC,CAAC,CACvH;IACH,CAAC;;EAEF,QAAAC,CAAA,G;qBApBYnB,oBAAoB;EAAA;EAAA,QAAAoB,EAAA,G;UAApBpB,oBAAoB;IAAAqB,SAAA;IAAAC,SAAA,WAAAC,2BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;;;;;;;;;;;;;QCXjCE,EAAA,CAAAC,cAAA,aAAkB;QAEND,EAAA,CAAAE,MAAA,oBAAa;QAAAF,EAAA,CAAAG,YAAA,EAAK;QACtBH,EAAA,CAAAC,cAAA,WAA0B;QAAAD,EAAA,CAAAE,MAAA,2MAE1B;QAAAF,EAAA,CAAAG,YAAA,EAAI;QAERH,EAAA,CAAAC,cAAA,aAAuB;QAKqBD,EAAA,CAAAI,UAAA,mBAAAC,sDAAAC,MAAA;UAAA,OAASP,GAAA,CAAArB,MAAA,CAAA6B,IAAA,CAAAD,MAAA,CAAAE,MAAA,CAAAC,KAAA,CAAsC;QAAA,EAAC,mBAAAC,sDAAAJ,MAAA;UAAA,OAC/DP,GAAA,CAAApB,MAAA,CAAA4B,IAAA,CAAAD,MAAA,CAAAE,MAAA,CAAAC,KAAA,CAAsC;QAAA,EADyB;QAD5ET,EAAA,CAAAG,YAAA,EAE8E;;;QAD1EH,EAAA,CAAAW,SAAA,IAAuB;QAAvBX,EAAA,CAAAY,UAAA,iBAAAb,GAAA,CAAAnB,MAAA,CAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}