{"ast":null,"code":"export const basicProgressBarData = [{\n  header: 'Basic progress bars',\n  desc: 'Progress components are built with two HTML elements, some CSS to set the width, and a few attributes.We use the <code>.progress </code>as a wrapper to indicate the max value of the progress bar. The <code>.progress-bar </code>requires an inline style, utility class, or custom CSS to set their width.',\n  class: 'progress-bar bg',\n  data: [{\n    colorClass: '',\n    width: ''\n  }, {\n    colorClass: 'primary',\n    width: '25%'\n  }, {\n    colorClass: 'secondary',\n    width: '50%'\n  }, {\n    colorClass: 'success',\n    width: '75%'\n  }, {\n    colorClass: 'info',\n    width: '100%'\n  }]\n}];\nexport const stripedData = [{\n  header: 'Progress bars striped',\n  desc: \"Add <code>.progress-bar-striped</code> to any <code>.progress-bar </code> to apply a stripe via CSS gradient over the progress bar's background color Using CSS Effects.\",\n  class: 'progress-bar progress-bar-striped',\n  data: [{\n    colorClass: 'primary',\n    width: '10%'\n  }, {\n    colorClass: 'warning',\n    width: '25%'\n  }, {\n    colorClass: 'danger',\n    width: '50%'\n  }, {\n    colorClass: 'success',\n    width: '75%'\n  }]\n}];\nexport const stripedAnimatedData = [{\n  header: 'Progress Bars animated',\n  desc: 'The striped gradient can also be animated. Add <code>.progress-bar-animated</code> to<code>.progress-bar</code> to animate the stripes right to left via CSS3 animations.',\n  class: 'progress-bar-animated progress-bar-striped',\n  data: [{\n    colorClass: 'primary',\n    width: '10%'\n  }, {\n    colorClass: 'warning',\n    width: '25%'\n  }, {\n    colorClass: 'danger',\n    width: '50%'\n  }, {\n    colorClass: 'success',\n    width: '75%'\n  }]\n}];\nexport const multipalBarData = [{\n  header: 'Multiple bars',\n  desc: 'Include multiple progress bars in a progress component if you need.',\n  class: 'progress-bar',\n  data1: [{\n    colorClass: 'primary',\n    width: '30%'\n  }, {\n    colorClass: 'secondary',\n    width: '20%'\n  }, {\n    colorClass: 'success',\n    width: '15%'\n  }],\n  data2: [{\n    colorClass: 'primary',\n    width: '10%'\n  }, {\n    colorClass: 'secondary',\n    width: '10%'\n  }, {\n    colorClass: 'success',\n    width: '10%'\n  }, {\n    colorClass: 'info',\n    width: '10%'\n  }, {\n    colorClass: 'warning',\n    width: '10%'\n  }, {\n    colorClass: 'danger',\n    width: '10%'\n  }, {\n    colorClass: 'primary',\n    width: '10%'\n  }, {\n    colorClass: 'light',\n    width: '10%'\n  }]\n}];\nexport const customeProgressData = [{\n  header: 'Custom Progress Bars',\n  desc: 'Use the <code>.progress-bar-animated </code>and <code>.progress-bar-striped </code>to animate the stripes right to left.',\n  data: [{\n    label: '0% Getting Started',\n    colorClass: '',\n    width: ''\n  }, {\n    label: '30% Getting Uploading...',\n    colorClass: 'primary',\n    width: '30%'\n  }, {\n    label: '60% Getting Pause...',\n    colorClass: 'secondary',\n    width: '60%'\n  }, {\n    label: '70% Getting Uploading...',\n    colorClass: 'success',\n    width: '70%'\n  }, {\n    label: '100% Completed',\n    colorClass: 'dark',\n    width: '100%'\n  }]\n}];\nexport const smallProgressBarData = [{\n  header: 'Small Progress Bars',\n  desc: 'Use <code> .sm-progress-bar</code>  class to change progress size to small:',\n  data: [{\n    width: '30%',\n    text: 30\n  }, {\n    width: '50%',\n    text: 50\n  }, {\n    width: '75%',\n    text: 75\n  }, {\n    width: '90%',\n    text: 90\n  }]\n}];\nexport const largeProgressBarData = [{\n  header: 'Large Progress Bars',\n  desc: 'Use <code> .lg-progress-bar</code>  class to change progress size to large:',\n  data: [{\n    colorClass: 'primary',\n    width: '25%'\n  }, {\n    colorClass: 'secondary',\n    width: '50%'\n  }, {\n    colorClass: 'success',\n    width: '75%'\n  }, {\n    colorClass: 'info',\n    width: '100%'\n  }]\n}];\nexport const customHeightProgressBarData = [{\n  header: 'Custom Height Progress Bars',\n  desc: 'Set a height value on the <code>.progress-bar</code>, so if you change that value the outer<code>.progress</code> will automatically resize accordingly.',\n  class: 'progress-bar bg',\n  data: [{\n    colorClass: 'primary',\n    width: '25%',\n    height: '1px'\n  }, {\n    colorClass: 'warning',\n    width: '50%',\n    height: '5px'\n  }, {\n    colorClass: 'danger',\n    width: '75%',\n    height: '11px'\n  }, {\n    colorClass: 'info',\n    width: '100%',\n    height: '19px'\n  }]\n}];","map":{"version":3,"names":["basicProgressBarData","header","desc","class","data","colorClass","width","stripedData","stripedAnimatedData","multipalBarData","data1","data2","customeProgressData","label","smallProgressBarData","text","largeProgressBarData","customHeightProgressBarData","height"],"sources":["C:\\Repository\\Jupiter\\juno-app\\src\\app\\shared\\data\\data\\ui-kits\\progres-bar.ts"],"sourcesContent":["export interface progresBar{\n    header : string;\n    desc : string;\n    class? : string;\n    data : data[]\n}\n\nexport interface data{\n    colorClass? : string;\n    width : string;\n    height? : string;\n    text? : number;\n}\n\nexport const basicProgressBarData : progresBar[]= [\n    {\n        header : 'Basic progress bars',\n        desc : 'Progress components are built with two HTML elements, some CSS to set the width, and a few attributes.We use the <code>.progress </code>as a wrapper to indicate the max value of the progress bar. The <code>.progress-bar </code>requires an inline style, utility class, or custom CSS to set their width.',\n        class : 'progress-bar bg',\n        data : [\n            {\n                colorClass : '',\n                width : '',\n            },\n            {\n                colorClass : 'primary',\n                width : '25%',\n            },\n            {\n                colorClass : 'secondary',\n                width : '50%',\n            },\n            {\n                colorClass : 'success',\n                width : '75%',\n            },\n            {\n                colorClass : 'info',\n                width : '100%',\n            },\n        ]\n    },\n]\n\nexport const stripedData : progresBar[] = [\n    {\n        header : 'Progress bars striped',\n        desc : \"Add <code>.progress-bar-striped</code> to any <code>.progress-bar </code> to apply a stripe via CSS gradient over the progress bar's background color Using CSS Effects.\",\n        class : 'progress-bar progress-bar-striped',\n        data : [\n            {\n                colorClass : 'primary',\n                width : '10%',\n            },\n            {\n                colorClass : 'warning',\n                width : '25%',\n            },\n            {\n                colorClass : 'danger',\n                width : '50%',\n            },\n            {\n                colorClass : 'success',\n                width : '75%',\n            },\n        ]\n    }\n]\n\nexport const stripedAnimatedData : progresBar[] = [\n    {\n        header : 'Progress Bars animated',\n        desc : 'The striped gradient can also be animated. Add <code>.progress-bar-animated</code> to<code>.progress-bar</code> to animate the stripes right to left via CSS3 animations.',\n        class : 'progress-bar-animated progress-bar-striped',\n        data : [\n            {\n                colorClass : 'primary',\n                width : '10%',\n            },\n            {\n                colorClass : 'warning',\n                width : '25%',\n            },\n            {\n                colorClass : 'danger',\n                width : '50%',\n            },\n            {\n                colorClass : 'success',\n                width : '75%',\n            },\n        ]\n    }\n]\n\nexport const multipalBarData = [\n    {\n        header : 'Multiple bars',\n        desc : 'Include multiple progress bars in a progress component if you need.',\n        class : 'progress-bar',\n        data1 : [\n            {\n                colorClass : 'primary',\n                width : '30%',\n            },\n            {\n                colorClass : 'secondary',\n                width : '20%',\n            },\n            {\n                colorClass : 'success',\n                width : '15%',\n            },\n        ],\n        data2 : [\n            {\n                colorClass : 'primary',\n                width : '10%',\n            },\n            {\n                colorClass : 'secondary',\n                width : '10%',\n            },\n            {\n                colorClass : 'success',\n                width : '10%',\n            },\n            {\n                colorClass : 'info',\n                width : '10%',\n            },\n            {\n                colorClass : 'warning',\n                width : '10%',\n            },\n            {\n                colorClass : 'danger',\n                width : '10%',\n            },\n            {\n                colorClass : 'primary',\n                width : '10%',\n            },\n            {\n                colorClass : 'light',\n                width : '10%',\n            },\n        ]\n    }\n]\n\nexport const customeProgressData = [\n    {\n        header : 'Custom Progress Bars',\n        desc : 'Use the <code>.progress-bar-animated </code>and <code>.progress-bar-striped </code>to animate the stripes right to left.',\n        data : [\n            {\n                label : '0% Getting Started',\n                colorClass : '',\n                width : '',\n            },\n            {\n                label : '30% Getting Uploading...',\n                colorClass : 'primary',\n                width : '30%',\n            },\n            {\n                label : '60% Getting Pause...',\n                colorClass : 'secondary',\n                width : '60%',\n            },\n            {\n                label : '70% Getting Uploading...',\n                colorClass : 'success',\n                width : '70%',\n            },\n            {\n                label : '100% Completed',\n                colorClass : 'dark',\n                width : '100%',\n            },\n        ]\n    }\n] \n\nexport const smallProgressBarData : progresBar[] = [\n    {\n        header : 'Small Progress Bars',\n        desc : 'Use <code> .sm-progress-bar</code>  class to change progress size to small:',\n        data : [\n            {\n                width : '30%',\n                text : 30,\n            },\n            {\n                width : '50%',\n                text : 50,\n            },\n            {\n                width : '75%',\n                text : 75,\n            },\n            {\n                width : '90%',\n                text : 90,\n            },\n        ]\n    }\n]\n\nexport const largeProgressBarData : progresBar[] = [\n    {\n        header : 'Large Progress Bars',\n        desc : 'Use <code> .lg-progress-bar</code>  class to change progress size to large:',\n        data : [\n            {\n                colorClass : 'primary',\n                width : '25%',\n            },\n            {\n                colorClass : 'secondary',\n                width : '50%',\n            },\n            {\n                colorClass : 'success',\n                width : '75%',\n            },\n            {\n                colorClass : 'info',\n                width : '100%',\n            },\n        ]\n    }\n]\n\nexport const customHeightProgressBarData : progresBar[] = [\n    {\n        header : 'Custom Height Progress Bars',\n        desc : 'Set a height value on the <code>.progress-bar</code>, so if you change that value the outer<code>.progress</code> will automatically resize accordingly.',\n        class : 'progress-bar bg',\n        data : [\n            {\n                colorClass : 'primary',\n                width : '25%',\n                height : '1px',\n            },\n            {\n                colorClass : 'warning',\n                width : '50%',\n                height : '5px',\n            },\n            {\n                colorClass : 'danger',\n                width : '75%',\n                height : '11px',\n            },\n            {\n                colorClass : 'info',\n                width : '100%',\n                height : '19px',\n            },\n        ]\n    }\n]"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}