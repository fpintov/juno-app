{"ast":null,"code":"import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Output, LOCALE_ID, Injectable, Inject, Optional, ElementRef, Component, Input, NgModule } from '@angular/core';\nclass GoogleChartsDataTable {\n  constructor(opt) {\n    this.opt = opt;\n    this.dataTableChanged = new EventEmitter();\n    if (opt) {\n      this._setDataTable(opt.dataTable, opt.firstRowIsData);\n    }\n  }\n  send() {\n    if (this.query === undefined) {\n      return;\n    }\n    this.query.send(queryResponse => {\n      this.setDataTable(queryResponse.getDataTable());\n      if (this.opt.queryCallback) {\n        this.opt.queryCallback(queryResponse);\n      }\n    });\n  }\n  init(opt) {\n    if (opt) {\n      this.opt = opt;\n    }\n    if (this.tid !== undefined) {\n      // doesn't work, see https://github.com/google/google-visualization-issues/issues/2381\n      // this.query.abort();\n      window.clearInterval(this.tid);\n      this.tid = undefined;\n    }\n    if (this.opt.dataSourceUrl) {\n      this.query = new google.visualization.Query(this.opt.dataSourceUrl);\n      if (this.opt.query) {\n        this.query.setQuery(this.opt.query);\n      }\n      if (this.opt.timeout !== undefined) {\n        this.query.setTimeout(this.opt.timeout);\n      }\n      if (this.opt.refreshInterval) {\n        // this.query.setRefreshInterval(this.opt.refreshInterval);\n        this.tid = window.setInterval(() => {\n          this.send();\n        }, this.opt.refreshInterval * 1000);\n      }\n      this.send();\n    } else {\n      this.setDataTable(this.opt.dataTable);\n    }\n  }\n  /**\n   * @returns Underlying google.visualization.DataTable\n   */\n  getDataTable() {\n    return this.dataTable;\n  }\n  setDataTable(dt, firstRowIsData) {\n    if (firstRowIsData === undefined) {\n      firstRowIsData = this.opt.firstRowIsData;\n    }\n    this._setDataTable(dt, firstRowIsData);\n    this.dataTableChanged.emit(this.dataTable);\n  }\n  _setDataTable(dt, firstRowIsData) {\n    if (Array.isArray(dt)) {\n      dt = google.visualization.arrayToDataTable(dt, firstRowIsData);\n    }\n    this.dataTable = dt;\n    this.reformat();\n  }\n  /**\n   * Applies formatters to data columns, if defined\n   */\n  reformat() {\n    const dt = this.dataTable;\n    if (dt === undefined) {\n      return;\n    }\n    if (this.opt.formatters === undefined) {\n      return;\n    }\n    for (const formatterConfig of this.opt.formatters) {\n      let formatter;\n      if (formatterConfig.type === 'PatternFormat') {\n        const fmtOptions = formatterConfig.options;\n        formatter = new google.visualization.PatternFormat(fmtOptions.pattern);\n        formatter.format(dt, formatterConfig.columns, fmtOptions.dstColumnIndex);\n        continue;\n      }\n      const formatterConstructor = google.visualization[formatterConfig.type];\n      const formatterOptions = formatterConfig.options;\n      formatter = new formatterConstructor(formatterOptions);\n      if (formatterConfig.type === 'ColorFormat' && formatterOptions) {\n        const fmtOptions = formatterOptions;\n        if (fmtOptions.ranges) {\n          for (const range of fmtOptions.ranges) {\n            if (typeof range.fromBgColor !== 'undefined' && typeof range.toBgColor !== 'undefined') {\n              formatter.addGradientRange(range.from, range.to, range.color, range.fromBgColor, range.toBgColor);\n            } else {\n              formatter.addRange(range.from, range.to, range.color, range.bgcolor);\n            }\n          }\n        }\n      }\n      for (const col of formatterConfig.columns) {\n        formatter.format(dt, col);\n      }\n    }\n  }\n}\nGoogleChartsDataTable.ɵfac = function GoogleChartsDataTable_Factory(t) {\n  i0.ɵɵinvalidFactory();\n};\nGoogleChartsDataTable.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: GoogleChartsDataTable,\n  outputs: {\n    dataTableChanged: \"dataTableChanged\"\n  }\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleChartsDataTable, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: undefined\n    }];\n  }, {\n    dataTableChanged: [{\n      type: Output\n    }]\n  });\n})();\nclass ChartHTMLTooltip {\n  constructor(el) {\n    this.el = el;\n  }\n  setPosition(x, y) {\n    this.el.nativeElement.style.left = x + ChartHTMLTooltip.PIXELS;\n    this.el.nativeElement.style.top = y + ChartHTMLTooltip.PIXELS;\n  }\n  getDOMElement() {\n    return this.el;\n  }\n}\nChartHTMLTooltip.PIXELS = 'px';\nclass GoogleChartsLoaderService {\n  constructor(localeId, googleChartsSettings) {\n    this.googleChartsSettings = googleChartsSettings;\n    this.loadedPackages = [];\n    this.loaded = false;\n    const defaultSettings = {\n      googleChartsVersion: '50',\n      language: localeId\n    };\n    this.googleChartsSettings = Object.assign(Object.assign({}, defaultSettings), this.googleChartsSettings);\n    this.googleScriptLoadingNotifier = new EventEmitter();\n    this.googleChartLoadingNotifier = new EventEmitter();\n    this.googleScriptIsLoading = false;\n    this.googleChartIsLoading = false;\n    this.loadGoogleChartsScriptPromise = new Promise((resolve, reject) => {\n      if (typeof google !== 'undefined' && google.charts) {\n        resolve();\n      } else if (!this.googleScriptIsLoading) {\n        this.googleScriptIsLoading = true;\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = 'https://www.gstatic.com/charts/loader.js';\n        script.async = true;\n        script.defer = true;\n        script.onload = () => {\n          this.googleScriptIsLoading = false;\n          this.googleScriptLoadingNotifier.emit(true);\n          resolve();\n        };\n        script.onerror = () => {\n          this.googleScriptIsLoading = false;\n          this.googleScriptLoadingNotifier.emit(false);\n          reject();\n        };\n        document.getElementsByTagName('head')[0].appendChild(script);\n      } else {\n        this.googleScriptLoadingNotifier.subscribe(loaded => {\n          if (loaded) {\n            resolve();\n          } else {\n            reject();\n          }\n        });\n      }\n    });\n  }\n  load(settings) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.loadGoogleChartsScriptPromise;\n      yield new Promise(resolve => {\n        if (this.googleChartIsLoading) {\n          this.googleChartLoadingNotifier.subscribe(() => {\n            this.doLoad(resolve, settings);\n          });\n          return;\n        }\n        this.doLoad(resolve, settings);\n      });\n    });\n  }\n  doLoad(resolve, settings) {\n    settings = Object.assign(Object.assign({}, this.googleChartsSettings), settings);\n    if (!settings.packages && this.loaded) {\n      resolve();\n      return;\n    }\n    if (settings.packages) {\n      let pkgs = settings.packages.filter(p => this.loadedPackages.indexOf(p) < 0);\n      if (pkgs.length == 0 && this.loaded) {\n        resolve();\n        return;\n      }\n      settings.packages = pkgs;\n    }\n    const _settings = settings;\n    _settings.callback = () => {\n      this.googleChartIsLoading = false;\n      if (_settings.packages !== undefined) {\n        this.loadedPackages = this.loadedPackages.concat(_settings.packages);\n      }\n      this.loaded = true;\n      this.googleChartLoadingNotifier.emit();\n      resolve();\n    };\n    this.googleChartIsLoading = true;\n    google.charts.load(settings.googleChartsVersion, _settings);\n  }\n}\nGoogleChartsLoaderService.ɵfac = function GoogleChartsLoaderService_Factory(t) {\n  return new (t || GoogleChartsLoaderService)(i0.ɵɵinject(LOCALE_ID), i0.ɵɵinject('googleChartsSettings', 8));\n};\nGoogleChartsLoaderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: GoogleChartsLoaderService,\n  factory: GoogleChartsLoaderService.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleChartsLoaderService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOCALE_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: ['googleChartsSettings']\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\nvar GoogleChartType;\n(function (GoogleChartType) {\n  GoogleChartType[\"AnnotationChart\"] = \"AnnotationChart\";\n  GoogleChartType[\"AreaChart\"] = \"AreaChart\";\n  GoogleChartType[\"BarChart\"] = \"BarChart\";\n  GoogleChartType[\"BubbleChart\"] = \"BubbleChart\";\n  GoogleChartType[\"Calendar\"] = \"Calendar\";\n  GoogleChartType[\"CandlestickChart\"] = \"CandlestickChart\";\n  GoogleChartType[\"ColumnChart\"] = \"ColumnChart\";\n  GoogleChartType[\"ComboChart\"] = \"ComboChart\";\n  GoogleChartType[\"Gantt\"] = \"Gantt\";\n  GoogleChartType[\"Gauge\"] = \"Gauge\";\n  GoogleChartType[\"GeoChart\"] = \"GeoChart\";\n  GoogleChartType[\"Histogram\"] = \"Histogram\";\n  GoogleChartType[\"LineChart\"] = \"LineChart\";\n  GoogleChartType[\"Map\"] = \"Map\";\n  GoogleChartType[\"OrgChart\"] = \"OrgChart\";\n  GoogleChartType[\"PieChart\"] = \"PieChart\";\n  GoogleChartType[\"Sankey\"] = \"Sankey\";\n  GoogleChartType[\"ScatterChart\"] = \"ScatterChart\";\n  GoogleChartType[\"SteppedAreaChart\"] = \"SteppedAreaChart\";\n  GoogleChartType[\"Table\"] = \"Table\";\n  GoogleChartType[\"Timeline\"] = \"Timeline\";\n  GoogleChartType[\"TreeMap\"] = \"TreeMap\";\n  GoogleChartType[\"VegaChart\"] = \"VegaChart\";\n  GoogleChartType[\"WordTree\"] = \"WordTree\";\n})(GoogleChartType || (GoogleChartType = {}));\nclass GoogleChartComponent {\n  constructor(el, loaderService) {\n    this.el = el;\n    this.loaderService = loaderService;\n    this.selectListener = () => {\n      const event = {\n        message: 'select',\n        row: null,\n        column: null,\n        selectedRowValues: [],\n        selectedRowFormattedValues: [],\n        columnLabel: ''\n      };\n      const s = this.wrapper.visualization.getSelection();\n      const gs = s[s.length - 1];\n      if (!gs) {\n        event.message = 'deselect';\n        return event;\n      }\n      const selection = gs;\n      if (gs.row != null) {\n        event.row = selection.row;\n        const selectedRowValues = [];\n        const selectedRowFormattedValues = [];\n        const dataTable = this.wrapper.getDataTable();\n        const numberOfColumns = dataTable.getNumberOfColumns();\n        for (let i = 0; i < numberOfColumns; i++) {\n          selectedRowValues.push(dataTable.getValue(selection.row, i));\n          selectedRowFormattedValues.push(dataTable.getFormattedValue(selection.row, i));\n        }\n        event.selectedRowValues = selectedRowValues;\n        event.selectedRowFormattedValues = selectedRowFormattedValues;\n      }\n      if (selection.column != null) {\n        event.column = selection.column;\n        event.columnLabel = this.getColumnLabelAtPosition(selection);\n      }\n      if (gs.name) {\n        event.columnLabel = gs.name;\n      }\n      return event;\n    };\n    this.chartSelect = new EventEmitter();\n    this.chartSelectOneTime = new EventEmitter();\n    this.chartReady = new EventEmitter();\n    this.chartReadyOneTime = new EventEmitter();\n    this.chartError = new EventEmitter();\n    this.chartErrorOneTime = new EventEmitter();\n    this.mouseOver = new EventEmitter();\n    this.mouseOverOneTime = new EventEmitter();\n    this.mouseOut = new EventEmitter();\n    this.mouseOutOneTime = new EventEmitter();\n    this.regionClick = new EventEmitter();\n    this.regionClickOneTime = new EventEmitter();\n  }\n  ngOnInit() {\n    this.HTMLel = this.el.nativeElement.querySelector('div');\n    if (Object.isExtensible(this.data)) {\n      this.data.component = this;\n    }\n    this.options = this.data.options;\n    this.init().then(() => {\n      this.draw();\n    });\n  }\n  init() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.loaderService.load();\n      this.recreateWrapper();\n    });\n  }\n  recreateWrapper() {\n    if (this.wrapper === undefined || this.wrapper.getChartType() !== this.data.chartType) {\n      this.dataTable = new GoogleChartsDataTable(this.data);\n      this.dataTable.dataTableChanged.subscribe(dt => {\n        this._draw();\n      });\n      // see dataTable in https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\n      let temp = this.data;\n      if (this.data.firstRowIsData) {\n        temp = Object.assign(temp, this.data);\n        temp.dataTable = this.dataTable.getDataTable();\n      }\n      this.wrapper = new google.visualization.ChartWrapper(temp);\n      this.registerChartWrapperEvents();\n      /* Calling draw even without data is the only way to pass the HTMl element\n         when using the chart in a dashboard. Don't do this in all other cases:\n         it breaks formatters with remote data source, hence the conditional. */\n      if (temp.dataTable === undefined && temp.dataSourceUrl === undefined) {\n        try {\n          this.wrapper.draw(this.HTMLel);\n        } catch (err) {}\n      }\n    }\n  }\n  _draw() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const dt = this.dataTable.getDataTable();\n      if (dt === undefined) {\n        return;\n      }\n      this.convertOptions();\n      this.recreateWrapper();\n      this.wrapper.setOptions(this.options);\n      this.wrapper.setDataTable(dt);\n      this.wrapper.draw(this.HTMLel);\n    });\n  }\n  getDataTable() {\n    return this.dataTable;\n  }\n  draw(value) {\n    if (value === undefined) {\n      value = this.data;\n    }\n    this.options = value.options;\n    this.dataTable.init(value);\n  }\n  getSelectorBySeriesType(seriesType) {\n    const selectors = {\n      bars: 'bar#%s#%r',\n      haxis: 'hAxis#0#label',\n      line: 'point#%s#%r',\n      legend: 'legendentry#%s',\n      area: 'point#%s#%r'\n    };\n    const selector = selectors[seriesType];\n    return selector;\n  }\n  /**\n   * Given a column number, counts how many\n   * columns have rol==\"data\". Those are mapped\n   * one-to-one to the series array. When rol is not defined\n   * a column of type number means a series column.\n   * @param column to inspect\n   */\n  getSeriesByColumn(column) {\n    let series = 0;\n    const dataTable = this.wrapper.getDataTable();\n    for (let i = column - 1; i >= 0; i--) {\n      const role = dataTable.getColumnRole(i);\n      const type = dataTable.getColumnType(i);\n      if (role === 'data' || type === 'number') {\n        series++;\n      }\n    }\n    return series;\n  }\n  getBoundingBoxForItem(item) {\n    let boundingBox = {\n      top: 0,\n      left: 0,\n      width: 0,\n      height: 0\n    };\n    if (this.cli) {\n      const column = item.column;\n      const series = this.getSeriesByColumn(column);\n      const row = item.row;\n      let seriesType = this.options.seriesType;\n      if (this.options.series && this.options.series[series] && this.options.series[series].type) {\n        seriesType = this.options.series[series].type;\n      }\n      if (seriesType) {\n        let selector = this.getSelectorBySeriesType(seriesType);\n        if (selector) {\n          selector = selector.replace('%s', series + '').replace('%c', column + '').replace('%r', row + '');\n          const box = this.cli.getBoundingBox(selector);\n          if (box) {\n            boundingBox = box;\n          }\n        }\n      }\n    }\n    return boundingBox;\n  }\n  getValueAtPosition(position) {\n    if (position.row == null) {\n      return null;\n    }\n    const dataTable = this.wrapper.getDataTable();\n    const value = dataTable.getValue(position.row, position.column);\n    return value;\n  }\n  getColumnTypeAtPosition(position) {\n    const dataTable = this.wrapper.getDataTable();\n    const type = dataTable.getColumnType(position.column) || '';\n    return type;\n  }\n  getColumnLabelAtPosition(position) {\n    const dataTable = this.wrapper.getDataTable();\n    const type = dataTable.getColumnLabel(position.column) || '';\n    return type;\n  }\n  getHTMLTooltip() {\n    const tooltipER = new ElementRef(this.el.nativeElement.querySelector('.google-visualization-tooltip'));\n    return new ChartHTMLTooltip(tooltipER);\n  }\n  parseMouseEvent(item) {\n    const chartType = this.wrapper.getChartType();\n    let eventColumn = item.column;\n    if (eventColumn == null) {\n      switch (chartType) {\n        case 'Timeline':\n          eventColumn = this.wrapper.getDataTable().getNumberOfColumns() === 3 ? 0 : 1;\n          break;\n        default:\n          eventColumn = 0;\n      }\n    }\n    const eventRow = item.row;\n    const myItem = {\n      row: eventRow,\n      column: eventColumn\n    };\n    const event = {\n      position: item,\n      boundingBox: this.getBoundingBoxForItem(myItem),\n      value: this.getValueAtPosition(myItem),\n      columnType: this.getColumnTypeAtPosition(myItem),\n      columnLabel: this.getColumnLabelAtPosition(myItem)\n    };\n    return event;\n  }\n  registerChartEvents() {\n    const chart = this.wrapper.getChart();\n    this.cli = chart.getChartLayoutInterface ? chart.getChartLayoutInterface() : null;\n    if (this.mouseOver.observers.length > 0) {\n      google.visualization.events.addListener(chart, 'onmouseover', item => {\n        const event = this.parseMouseEvent(item);\n        event.tooltip = this.getHTMLTooltip();\n        this.mouseOver.emit(event);\n      });\n    }\n    if (this.mouseOverOneTime.observers.length > 0) {\n      google.visualization.events.addOneTimeListener(chart, 'onmouseover', item => {\n        const event = this.parseMouseEvent(item);\n        event.tooltip = this.getHTMLTooltip();\n        this.mouseOverOneTime.emit(event);\n      });\n    }\n    if (this.mouseOut.observers.length > 0) {\n      google.visualization.events.addListener(chart, 'onmouseout', item => {\n        const event = this.parseMouseEvent(item);\n        this.mouseOut.emit(event);\n      });\n    }\n    if (this.mouseOutOneTime.observers.length > 0) {\n      google.visualization.events.addOneTimeListener(chart, 'onmouseout', item => {\n        const event = this.parseMouseEvent(item);\n        this.mouseOutOneTime.emit(event);\n      });\n    }\n    if (this.data.chartType === 'GeoChart') {\n      if (this.regionClick.observers.length > 0) {\n        google.visualization.events.addListener(chart, 'regionClick', item => {\n          this.regionClick.emit(item);\n        });\n      }\n      if (this.regionClickOneTime.observers.length > 0) {\n        google.visualization.events.addOneTimeListener(chart, 'regionClick', item => {\n          this.regionClick.emit(item);\n        });\n      }\n    }\n  }\n  registerChartWrapperEvents() {\n    google.visualization.events.addListener(this.wrapper, 'ready', () => {\n      this.chartReady.emit({\n        message: 'Chart ready'\n      });\n    });\n    google.visualization.events.addOneTimeListener(this.wrapper, 'ready', () => {\n      this.chartReadyOneTime.emit({\n        message: 'Chart ready (one time)'\n      });\n      this.registerChartEvents();\n    });\n    google.visualization.events.addListener(this.wrapper, 'error', error => {\n      this.chartError.emit(error);\n    });\n    google.visualization.events.addOneTimeListener(this.wrapper, 'error', error => {\n      this.chartErrorOneTime.emit(error);\n    });\n    this.addListener(this.wrapper, 'select', this.selectListener, this.chartSelect);\n    this.addOneTimeListener(this.wrapper, 'select', this.selectListener, this.chartSelectOneTime);\n  }\n  addListener(source, eventType, listenerFn, evEmitter) {\n    google.visualization.events.addListener(source, eventType, () => {\n      evEmitter.emit(listenerFn());\n    });\n  }\n  addOneTimeListener(source, eventType, listenerFn, evEmitter) {\n    google.visualization.events.addOneTimeListener(source, eventType, () => {\n      evEmitter.emit(listenerFn());\n    });\n  }\n  convertOptions() {\n    try {\n      this.options = google.charts[this.data.chartType].convertOptions(this.options);\n    } catch (error) {\n      return;\n    }\n  }\n}\nGoogleChartComponent.ɵfac = function GoogleChartComponent_Factory(t) {\n  return new (t || GoogleChartComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(GoogleChartsLoaderService));\n};\nGoogleChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GoogleChartComponent,\n  selectors: [[\"google-chart\"]],\n  inputs: {\n    data: \"data\"\n  },\n  outputs: {\n    chartReady: \"chartReady\",\n    chartReadyOneTime: \"chartReadyOneTime\",\n    chartError: \"chartError\",\n    chartErrorOneTime: \"chartErrorOneTime\",\n    chartSelect: \"chartSelect\",\n    chartSelectOneTime: \"chartSelectOneTime\",\n    mouseOver: \"mouseOver\",\n    mouseOverOneTime: \"mouseOverOneTime\",\n    mouseOut: \"mouseOut\",\n    mouseOutOneTime: \"mouseOutOneTime\",\n    regionClick: \"regionClick\",\n    regionClickOneTime: \"regionClickOneTime\"\n  },\n  decls: 1,\n  vars: 0,\n  template: function GoogleChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\");\n    }\n  },\n  encapsulation: 2\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'google-chart',\n      template: '<div></div>'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: GoogleChartsLoaderService\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    chartReady: [{\n      type: Output\n    }],\n    chartReadyOneTime: [{\n      type: Output\n    }],\n    chartError: [{\n      type: Output\n    }],\n    chartErrorOneTime: [{\n      type: Output\n    }],\n    chartSelect: [{\n      type: Output\n    }],\n    chartSelectOneTime: [{\n      type: Output\n    }],\n    mouseOver: [{\n      type: Output\n    }],\n    mouseOverOneTime: [{\n      type: Output\n    }],\n    mouseOut: [{\n      type: Output\n    }],\n    mouseOutOneTime: [{\n      type: Output\n    }],\n    regionClick: [{\n      type: Output\n    }],\n    regionClickOneTime: [{\n      type: Output\n    }]\n  });\n})();\nclass GoogleChartsDashboardComponent {\n  constructor(el, loaderService) {\n    this.el = el;\n    this.loaderService = loaderService;\n    this.el = el;\n    this.loaderService = loaderService;\n  }\n  ngOnInit() {\n    this.data.component = this;\n    this.init().then(() => {\n      if (!this.dataTable) {\n        this.dataTable = new GoogleChartsDataTable(this.data);\n        this.dataTable.dataTableChanged.subscribe(dt => {\n          this._draw();\n        });\n      }\n      this.draw();\n    });\n  }\n  init() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.loaderService.load({\n        packages: ['controls']\n      });\n      this.dashboard = new google.visualization.Dashboard(this.el.nativeElement.querySelector('div'));\n      for (const b of this.data.bind) {\n        let controls = b[0];\n        let charts = b[1];\n        if (!(controls instanceof Array)) {\n          controls = [controls];\n        }\n        if (!(charts instanceof Array)) {\n          charts = [charts];\n        }\n        for (const c of controls) {\n          yield c.component.ensureInit();\n        }\n        for (const c of charts) {\n          if (!c.component) {\n            continue;\n          }\n          yield c.component.init();\n          const data = c.component.data;\n          if (data.dataTable !== undefined || data.dataSourceUrl !== undefined) {\n            throw Error('dataTable and dataSourceUrl cannot be specified when ' + 'chart is drawn in a Dashboard');\n          }\n        }\n        this.dashboard.bind(controls.map(x => x.component.wrapper), charts.map(x => x.component.wrapper));\n      }\n    });\n  }\n  draw(value) {\n    this.dataTable.init(value);\n  }\n  _draw() {\n    this.dashboard.draw(this.dataTable.getDataTable());\n  }\n}\nGoogleChartsDashboardComponent.ɵfac = function GoogleChartsDashboardComponent_Factory(t) {\n  return new (t || GoogleChartsDashboardComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(GoogleChartsLoaderService));\n};\nGoogleChartsDashboardComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GoogleChartsDashboardComponent,\n  selectors: [[\"google-charts-dashboard\"]],\n  inputs: {\n    data: \"data\"\n  },\n  decls: 1,\n  vars: 0,\n  template: function GoogleChartsDashboardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\");\n    }\n  },\n  encapsulation: 2\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleChartsDashboardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'google-charts-dashboard',\n      template: '<div></div>'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: GoogleChartsLoaderService\n    }];\n  }, {\n    data: [{\n      type: Input\n    }]\n  });\n})();\nclass GoogleChartsControlComponent {\n  constructor(el, loaderService) {\n    this.el = el;\n    this.loaderService = loaderService;\n    this.el = el;\n    this.loaderService = loaderService;\n  }\n  ngOnInit() {\n    this.data.component = this;\n  }\n  ensureInit() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.wrapper) {\n        return;\n      }\n      yield this.loaderService.load({\n        packages: ['controls']\n      });\n      let opt;\n      opt = Object.create(this.data);\n      opt.containerId = this.el.nativeElement.querySelector('div');\n      this.wrapper = new google.visualization.ControlWrapper(opt);\n    });\n  }\n}\nGoogleChartsControlComponent.ɵfac = function GoogleChartsControlComponent_Factory(t) {\n  return new (t || GoogleChartsControlComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(GoogleChartsLoaderService));\n};\nGoogleChartsControlComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GoogleChartsControlComponent,\n  selectors: [[\"google-charts-control\"]],\n  inputs: {\n    data: \"data\"\n  },\n  decls: 1,\n  vars: 0,\n  template: function GoogleChartsControlComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\");\n    }\n  },\n  encapsulation: 2\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleChartsControlComponent, [{\n    type: Component,\n    args: [{\n      selector: 'google-charts-control',\n      template: '<div></div>'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: GoogleChartsLoaderService\n    }];\n  }, {\n    data: [{\n      type: Input\n    }]\n  });\n})();\nclass Ng2GoogleChartsModule {}\nNg2GoogleChartsModule.ɵfac = function Ng2GoogleChartsModule_Factory(t) {\n  return new (t || Ng2GoogleChartsModule)();\n};\nNg2GoogleChartsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: Ng2GoogleChartsModule\n});\nNg2GoogleChartsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [GoogleChartsLoaderService]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Ng2GoogleChartsModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [GoogleChartComponent, GoogleChartsDashboardComponent, GoogleChartsControlComponent],\n      providers: [GoogleChartsLoaderService],\n      exports: [GoogleChartComponent, GoogleChartsDashboardComponent, GoogleChartsControlComponent]\n    }]\n  }], null, null);\n})();\nfunction isComponent(chart) {\n  return chart.wrapper !== undefined;\n}\nclass GoogleChartEditor {\n  constructor(loaderService) {\n    this.loaderService = loaderService;\n  }\n  createEditor() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.chartEditor !== undefined) {\n        return;\n      }\n      yield this.loaderService.load({\n        packages: ['charteditor']\n      });\n      this.chartEditor = new google.visualization.ChartEditor();\n      google.visualization.events.addListener(this.chartEditor, 'ok', () => {\n        const wrapper = this.chartEditor.getChartWrapper();\n        this.comp.wrapper = wrapper;\n        this.comp.data.chartType = wrapper.getChartType();\n        if (this.comp.data.options !== undefined || Object.isExtensible(this.comp.data)) {\n          this.comp.data.options = wrapper.getOptions();\n        }\n        this.comp.wrapper.draw();\n      });\n    });\n  }\n  openDialog(chart, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.createEditor();\n      return new Promise((resolve, reject) => {\n        this.comp = isComponent(chart) ? chart : chart.component;\n        google.visualization.events.addListener(this.chartEditor, 'ok', () => {\n          resolve(this.comp.wrapper);\n        });\n        google.visualization.events.addListener(this.chartEditor, 'cancel', () => {\n          reject();\n        });\n        this.chartEditor.openDialog(this.comp.wrapper, options);\n      });\n    });\n  }\n}\nGoogleChartEditor.ɵfac = function GoogleChartEditor_Factory(t) {\n  return new (t || GoogleChartEditor)(i0.ɵɵinject(GoogleChartsLoaderService));\n};\nGoogleChartEditor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: GoogleChartEditor,\n  factory: GoogleChartEditor.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleChartEditor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: GoogleChartsLoaderService\n    }];\n  }, null);\n})();\n\n/*\n * Public API Surface of ng2-google-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ChartHTMLTooltip, GoogleChartComponent, GoogleChartEditor, GoogleChartType, GoogleChartsControlComponent, GoogleChartsDashboardComponent, GoogleChartsLoaderService, Ng2GoogleChartsModule };","map":{"version":3,"names":["__awaiter","i0","EventEmitter","Directive","Output","LOCALE_ID","Injectable","Inject","Optional","ElementRef","Component","Input","NgModule","GoogleChartsDataTable","constructor","opt","dataTableChanged","_setDataTable","dataTable","firstRowIsData","send","query","undefined","queryResponse","setDataTable","getDataTable","queryCallback","init","tid","window","clearInterval","dataSourceUrl","google","visualization","Query","setQuery","timeout","setTimeout","refreshInterval","setInterval","dt","emit","Array","isArray","arrayToDataTable","reformat","formatters","formatterConfig","formatter","type","fmtOptions","options","PatternFormat","pattern","format","columns","dstColumnIndex","formatterConstructor","formatterOptions","ranges","range","fromBgColor","toBgColor","addGradientRange","from","to","color","addRange","bgcolor","col","ɵfac","GoogleChartsDataTable_Factory","t","ɵɵinvalidFactory","ɵdir","ɵɵdefineDirective","outputs","ngDevMode","ɵsetClassMetadata","ChartHTMLTooltip","el","setPosition","x","y","nativeElement","style","left","PIXELS","top","getDOMElement","GoogleChartsLoaderService","localeId","googleChartsSettings","loadedPackages","loaded","defaultSettings","googleChartsVersion","language","Object","assign","googleScriptLoadingNotifier","googleChartLoadingNotifier","googleScriptIsLoading","googleChartIsLoading","loadGoogleChartsScriptPromise","Promise","resolve","reject","charts","script","document","createElement","src","async","defer","onload","onerror","getElementsByTagName","appendChild","subscribe","load","settings","doLoad","packages","pkgs","filter","p","indexOf","length","_settings","callback","concat","GoogleChartsLoaderService_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","args","decorators","GoogleChartType","GoogleChartComponent","loaderService","selectListener","event","message","row","column","selectedRowValues","selectedRowFormattedValues","columnLabel","s","wrapper","getSelection","gs","selection","numberOfColumns","getNumberOfColumns","i","push","getValue","getFormattedValue","getColumnLabelAtPosition","name","chartSelect","chartSelectOneTime","chartReady","chartReadyOneTime","chartError","chartErrorOneTime","mouseOver","mouseOverOneTime","mouseOut","mouseOutOneTime","regionClick","regionClickOneTime","ngOnInit","HTMLel","querySelector","isExtensible","data","component","then","draw","recreateWrapper","getChartType","chartType","_draw","temp","ChartWrapper","registerChartWrapperEvents","err","convertOptions","setOptions","value","getSelectorBySeriesType","seriesType","selectors","bars","haxis","line","legend","area","selector","getSeriesByColumn","series","role","getColumnRole","getColumnType","getBoundingBoxForItem","item","boundingBox","width","height","cli","replace","box","getBoundingBox","getValueAtPosition","position","getColumnTypeAtPosition","getColumnLabel","getHTMLTooltip","tooltipER","parseMouseEvent","eventColumn","eventRow","myItem","columnType","registerChartEvents","chart","getChart","getChartLayoutInterface","observers","events","addListener","tooltip","addOneTimeListener","error","source","eventType","listenerFn","evEmitter","GoogleChartComponent_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","inputs","decls","vars","template","GoogleChartComponent_Template","rf","ctx","ɵɵelement","encapsulation","GoogleChartsDashboardComponent","dashboard","Dashboard","b","bind","controls","c","ensureInit","Error","map","GoogleChartsDashboardComponent_Factory","GoogleChartsDashboardComponent_Template","GoogleChartsControlComponent","create","containerId","ControlWrapper","GoogleChartsControlComponent_Factory","GoogleChartsControlComponent_Template","Ng2GoogleChartsModule","Ng2GoogleChartsModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","declarations","exports","isComponent","GoogleChartEditor","createEditor","chartEditor","ChartEditor","getChartWrapper","comp","getOptions","openDialog","GoogleChartEditor_Factory"],"sources":["C:/Repository/Jupiter/juno-app/node_modules/ng2-google-charts/fesm2015/ng2-google-charts.js"],"sourcesContent":["import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Output, LOCALE_ID, Injectable, Inject, Optional, ElementRef, Component, Input, NgModule } from '@angular/core';\n\nclass GoogleChartsDataTable {\n    constructor(opt) {\n        this.opt = opt;\n        this.dataTableChanged = new EventEmitter();\n        if (opt) {\n            this._setDataTable(opt.dataTable, opt.firstRowIsData);\n        }\n    }\n    send() {\n        if (this.query === undefined) {\n            return;\n        }\n        this.query.send((queryResponse) => {\n            this.setDataTable(queryResponse.getDataTable());\n            if (this.opt.queryCallback) {\n                this.opt.queryCallback(queryResponse);\n            }\n        });\n    }\n    init(opt) {\n        if (opt) {\n            this.opt = opt;\n        }\n        if (this.tid !== undefined) {\n            // doesn't work, see https://github.com/google/google-visualization-issues/issues/2381\n            // this.query.abort();\n            window.clearInterval(this.tid);\n            this.tid = undefined;\n        }\n        if (this.opt.dataSourceUrl) {\n            this.query = new google.visualization.Query(this.opt.dataSourceUrl);\n            if (this.opt.query) {\n                this.query.setQuery(this.opt.query);\n            }\n            if (this.opt.timeout !== undefined) {\n                this.query.setTimeout(this.opt.timeout);\n            }\n            if (this.opt.refreshInterval) {\n                // this.query.setRefreshInterval(this.opt.refreshInterval);\n                this.tid = window.setInterval(() => {\n                    this.send();\n                }, this.opt.refreshInterval * 1000);\n            }\n            this.send();\n        }\n        else {\n            this.setDataTable(this.opt.dataTable);\n        }\n    }\n    /**\n     * @returns Underlying google.visualization.DataTable\n     */\n    getDataTable() {\n        return this.dataTable;\n    }\n    setDataTable(dt, firstRowIsData) {\n        if (firstRowIsData === undefined) {\n            firstRowIsData = this.opt.firstRowIsData;\n        }\n        this._setDataTable(dt, firstRowIsData);\n        this.dataTableChanged.emit(this.dataTable);\n    }\n    _setDataTable(dt, firstRowIsData) {\n        if (Array.isArray(dt)) {\n            dt = google.visualization.arrayToDataTable(dt, firstRowIsData);\n        }\n        this.dataTable = dt;\n        this.reformat();\n    }\n    /**\n     * Applies formatters to data columns, if defined\n     */\n    reformat() {\n        const dt = this.dataTable;\n        if (dt === undefined) {\n            return;\n        }\n        if (this.opt.formatters === undefined) {\n            return;\n        }\n        for (const formatterConfig of this.opt.formatters) {\n            let formatter;\n            if (formatterConfig.type === 'PatternFormat') {\n                const fmtOptions = formatterConfig.options;\n                formatter = new google.visualization.PatternFormat(fmtOptions.pattern);\n                formatter.format(dt, formatterConfig.columns, fmtOptions.dstColumnIndex);\n                continue;\n            }\n            const formatterConstructor = google.visualization[formatterConfig.type];\n            const formatterOptions = formatterConfig.options;\n            formatter = new formatterConstructor(formatterOptions);\n            if (formatterConfig.type === 'ColorFormat' && formatterOptions) {\n                const fmtOptions = formatterOptions;\n                if (fmtOptions.ranges) {\n                    for (const range of fmtOptions.ranges) {\n                        if (typeof (range.fromBgColor) !== 'undefined'\n                            && typeof (range.toBgColor) !== 'undefined') {\n                            formatter.addGradientRange(range.from, range.to, range.color, range.fromBgColor, range.toBgColor);\n                        }\n                        else {\n                            formatter.addRange(range.from, range.to, range.color, range.bgcolor);\n                        }\n                    }\n                }\n            }\n            for (const col of formatterConfig.columns) {\n                formatter.format(dt, col);\n            }\n        }\n    }\n}\nGoogleChartsDataTable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartsDataTable, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\nGoogleChartsDataTable.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.14\", type: GoogleChartsDataTable, outputs: { dataTableChanged: \"dataTableChanged\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartsDataTable, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: undefined }]; }, propDecorators: { dataTableChanged: [{\n                type: Output\n            }] } });\n\nclass ChartHTMLTooltip {\n    constructor(el) {\n        this.el = el;\n    }\n    setPosition(x, y) {\n        this.el.nativeElement.style.left = x + ChartHTMLTooltip.PIXELS;\n        this.el.nativeElement.style.top = y + ChartHTMLTooltip.PIXELS;\n    }\n    getDOMElement() {\n        return this.el;\n    }\n}\nChartHTMLTooltip.PIXELS = 'px';\n\nclass GoogleChartsLoaderService {\n    constructor(localeId, googleChartsSettings) {\n        this.googleChartsSettings = googleChartsSettings;\n        this.loadedPackages = [];\n        this.loaded = false;\n        const defaultSettings = {\n            googleChartsVersion: '50',\n            language: localeId,\n        };\n        this.googleChartsSettings = Object.assign(Object.assign({}, defaultSettings), this.googleChartsSettings);\n        this.googleScriptLoadingNotifier = new EventEmitter();\n        this.googleChartLoadingNotifier = new EventEmitter();\n        this.googleScriptIsLoading = false;\n        this.googleChartIsLoading = false;\n        this.loadGoogleChartsScriptPromise = new Promise((resolve, reject) => {\n            if (typeof google !== 'undefined' && google.charts) {\n                resolve();\n            }\n            else if (!this.googleScriptIsLoading) {\n                this.googleScriptIsLoading = true;\n                const script = document.createElement('script');\n                script.type = 'text/javascript';\n                script.src = 'https://www.gstatic.com/charts/loader.js';\n                script.async = true;\n                script.defer = true;\n                script.onload = () => {\n                    this.googleScriptIsLoading = false;\n                    this.googleScriptLoadingNotifier.emit(true);\n                    resolve();\n                };\n                script.onerror = () => {\n                    this.googleScriptIsLoading = false;\n                    this.googleScriptLoadingNotifier.emit(false);\n                    reject();\n                };\n                document.getElementsByTagName('head')[0].appendChild(script);\n            }\n            else {\n                this.googleScriptLoadingNotifier.subscribe((loaded) => {\n                    if (loaded) {\n                        resolve();\n                    }\n                    else {\n                        reject();\n                    }\n                });\n            }\n        });\n    }\n    load(settings) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.loadGoogleChartsScriptPromise;\n            yield new Promise((resolve) => {\n                if (this.googleChartIsLoading) {\n                    this.googleChartLoadingNotifier.subscribe(() => {\n                        this.doLoad(resolve, settings);\n                    });\n                    return;\n                }\n                this.doLoad(resolve, settings);\n            });\n        });\n    }\n    doLoad(resolve, settings) {\n        settings = Object.assign(Object.assign({}, this.googleChartsSettings), settings);\n        if (!settings.packages && this.loaded) {\n            resolve();\n            return;\n        }\n        if (settings.packages) {\n            let pkgs = settings.packages.filter(p => this.loadedPackages.indexOf(p) < 0);\n            if (pkgs.length == 0 && this.loaded) {\n                resolve();\n                return;\n            }\n            settings.packages = pkgs;\n        }\n        const _settings = settings;\n        _settings.callback = () => {\n            this.googleChartIsLoading = false;\n            if (_settings.packages !== undefined) {\n                this.loadedPackages = this.loadedPackages.concat(_settings.packages);\n            }\n            this.loaded = true;\n            this.googleChartLoadingNotifier.emit();\n            resolve();\n        };\n        this.googleChartIsLoading = true;\n        google.charts.load(settings.googleChartsVersion, _settings);\n    }\n}\nGoogleChartsLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartsLoaderService, deps: [{ token: LOCALE_ID }, { token: 'googleChartsSettings', optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nGoogleChartsLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartsLoaderService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartsLoaderService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [LOCALE_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: ['googleChartsSettings']\n                }, {\n                    type: Optional\n                }] }]; } });\n\nvar GoogleChartType;\n(function (GoogleChartType) {\n    GoogleChartType[\"AnnotationChart\"] = \"AnnotationChart\";\n    GoogleChartType[\"AreaChart\"] = \"AreaChart\";\n    GoogleChartType[\"BarChart\"] = \"BarChart\";\n    GoogleChartType[\"BubbleChart\"] = \"BubbleChart\";\n    GoogleChartType[\"Calendar\"] = \"Calendar\";\n    GoogleChartType[\"CandlestickChart\"] = \"CandlestickChart\";\n    GoogleChartType[\"ColumnChart\"] = \"ColumnChart\";\n    GoogleChartType[\"ComboChart\"] = \"ComboChart\";\n    GoogleChartType[\"Gantt\"] = \"Gantt\";\n    GoogleChartType[\"Gauge\"] = \"Gauge\";\n    GoogleChartType[\"GeoChart\"] = \"GeoChart\";\n    GoogleChartType[\"Histogram\"] = \"Histogram\";\n    GoogleChartType[\"LineChart\"] = \"LineChart\";\n    GoogleChartType[\"Map\"] = \"Map\";\n    GoogleChartType[\"OrgChart\"] = \"OrgChart\";\n    GoogleChartType[\"PieChart\"] = \"PieChart\";\n    GoogleChartType[\"Sankey\"] = \"Sankey\";\n    GoogleChartType[\"ScatterChart\"] = \"ScatterChart\";\n    GoogleChartType[\"SteppedAreaChart\"] = \"SteppedAreaChart\";\n    GoogleChartType[\"Table\"] = \"Table\";\n    GoogleChartType[\"Timeline\"] = \"Timeline\";\n    GoogleChartType[\"TreeMap\"] = \"TreeMap\";\n    GoogleChartType[\"VegaChart\"] = \"VegaChart\";\n    GoogleChartType[\"WordTree\"] = \"WordTree\";\n})(GoogleChartType || (GoogleChartType = {}));\nclass GoogleChartComponent {\n    constructor(el, loaderService) {\n        this.el = el;\n        this.loaderService = loaderService;\n        this.selectListener = () => {\n            const event = {\n                message: 'select',\n                row: null,\n                column: null,\n                selectedRowValues: [],\n                selectedRowFormattedValues: [],\n                columnLabel: ''\n            };\n            const s = this.wrapper.visualization.getSelection();\n            const gs = s[s.length - 1];\n            if (!gs) {\n                event.message = 'deselect';\n                return event;\n            }\n            const selection = gs;\n            if (gs.row != null) {\n                event.row = selection.row;\n                const selectedRowValues = [];\n                const selectedRowFormattedValues = [];\n                const dataTable = this.wrapper.getDataTable();\n                const numberOfColumns = dataTable.getNumberOfColumns();\n                for (let i = 0; i < numberOfColumns; i++) {\n                    selectedRowValues.push(dataTable.getValue(selection.row, i));\n                    selectedRowFormattedValues.push(dataTable.getFormattedValue(selection.row, i));\n                }\n                event.selectedRowValues = selectedRowValues;\n                event.selectedRowFormattedValues = selectedRowFormattedValues;\n            }\n            if (selection.column != null) {\n                event.column = selection.column;\n                event.columnLabel = this.getColumnLabelAtPosition(selection);\n            }\n            if (gs.name) {\n                event.columnLabel = gs.name;\n            }\n            return event;\n        };\n        this.chartSelect = new EventEmitter();\n        this.chartSelectOneTime = new EventEmitter();\n        this.chartReady = new EventEmitter();\n        this.chartReadyOneTime = new EventEmitter();\n        this.chartError = new EventEmitter();\n        this.chartErrorOneTime = new EventEmitter();\n        this.mouseOver = new EventEmitter();\n        this.mouseOverOneTime = new EventEmitter();\n        this.mouseOut = new EventEmitter();\n        this.mouseOutOneTime = new EventEmitter();\n        this.regionClick = new EventEmitter();\n        this.regionClickOneTime = new EventEmitter();\n    }\n    ngOnInit() {\n        this.HTMLel = this.el.nativeElement.querySelector('div');\n        if (Object.isExtensible(this.data)) {\n            this.data.component = this;\n        }\n        this.options = this.data.options;\n        this.init().then(() => {\n            this.draw();\n        });\n    }\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.loaderService.load();\n            this.recreateWrapper();\n        });\n    }\n    recreateWrapper() {\n        if (this.wrapper === undefined || this.wrapper.getChartType() !== this.data.chartType) {\n            this.dataTable = new GoogleChartsDataTable(this.data);\n            this.dataTable.dataTableChanged.subscribe((dt) => {\n                this._draw();\n            });\n            // see dataTable in https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\n            let temp = this.data;\n            if (this.data.firstRowIsData) {\n                temp = Object.assign(temp, this.data);\n                temp.dataTable = this.dataTable.getDataTable();\n            }\n            this.wrapper = new google.visualization.ChartWrapper(temp);\n            this.registerChartWrapperEvents();\n            /* Calling draw even without data is the only way to pass the HTMl element\n               when using the chart in a dashboard. Don't do this in all other cases:\n               it breaks formatters with remote data source, hence the conditional. */\n            if (temp.dataTable === undefined && temp.dataSourceUrl === undefined) {\n                try {\n                    this.wrapper.draw(this.HTMLel);\n                }\n                catch (err) { }\n            }\n        }\n    }\n    _draw() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const dt = this.dataTable.getDataTable();\n            if (dt === undefined) {\n                return;\n            }\n            this.convertOptions();\n            this.recreateWrapper();\n            this.wrapper.setOptions(this.options);\n            this.wrapper.setDataTable(dt);\n            this.wrapper.draw(this.HTMLel);\n        });\n    }\n    getDataTable() {\n        return this.dataTable;\n    }\n    draw(value) {\n        if (value === undefined) {\n            value = this.data;\n        }\n        this.options = value.options;\n        this.dataTable.init(value);\n    }\n    getSelectorBySeriesType(seriesType) {\n        const selectors = {\n            bars: 'bar#%s#%r',\n            haxis: 'hAxis#0#label',\n            line: 'point#%s#%r',\n            legend: 'legendentry#%s',\n            area: 'point#%s#%r'\n        };\n        const selector = selectors[seriesType];\n        return selector;\n    }\n    /**\n     * Given a column number, counts how many\n     * columns have rol==\"data\". Those are mapped\n     * one-to-one to the series array. When rol is not defined\n     * a column of type number means a series column.\n     * @param column to inspect\n     */\n    getSeriesByColumn(column) {\n        let series = 0;\n        const dataTable = this.wrapper.getDataTable();\n        for (let i = column - 1; i >= 0; i--) {\n            const role = dataTable.getColumnRole(i);\n            const type = dataTable.getColumnType(i);\n            if (role === 'data' || type === 'number') {\n                series++;\n            }\n        }\n        return series;\n    }\n    getBoundingBoxForItem(item) {\n        let boundingBox = { top: 0, left: 0, width: 0, height: 0 };\n        if (this.cli) {\n            const column = item.column;\n            const series = this.getSeriesByColumn(column);\n            const row = item.row;\n            let seriesType = this.options.seriesType;\n            if (this.options.series && this.options.series[series] && this.options.series[series].type) {\n                seriesType = this.options.series[series].type;\n            }\n            if (seriesType) {\n                let selector = this.getSelectorBySeriesType(seriesType);\n                if (selector) {\n                    selector = selector.replace('%s', series + '').replace('%c', column + '').replace('%r', row + '');\n                    const box = this.cli.getBoundingBox(selector);\n                    if (box) {\n                        boundingBox = box;\n                    }\n                }\n            }\n        }\n        return boundingBox;\n    }\n    getValueAtPosition(position) {\n        if (position.row == null) {\n            return null;\n        }\n        const dataTable = this.wrapper.getDataTable();\n        const value = dataTable.getValue(position.row, position.column);\n        return value;\n    }\n    getColumnTypeAtPosition(position) {\n        const dataTable = this.wrapper.getDataTable();\n        const type = dataTable.getColumnType(position.column) || '';\n        return type;\n    }\n    getColumnLabelAtPosition(position) {\n        const dataTable = this.wrapper.getDataTable();\n        const type = dataTable.getColumnLabel(position.column) || '';\n        return type;\n    }\n    getHTMLTooltip() {\n        const tooltipER = new ElementRef(this.el.nativeElement.querySelector('.google-visualization-tooltip'));\n        return new ChartHTMLTooltip(tooltipER);\n    }\n    parseMouseEvent(item) {\n        const chartType = this.wrapper.getChartType();\n        let eventColumn = item.column;\n        if (eventColumn == null) {\n            switch (chartType) {\n                case 'Timeline':\n                    eventColumn = this.wrapper.getDataTable().getNumberOfColumns() === 3 ? 0 : 1;\n                    break;\n                default:\n                    eventColumn = 0;\n            }\n        }\n        const eventRow = item.row;\n        const myItem = {\n            row: eventRow,\n            column: eventColumn\n        };\n        const event = {\n            position: item,\n            boundingBox: this.getBoundingBoxForItem(myItem),\n            value: this.getValueAtPosition(myItem),\n            columnType: this.getColumnTypeAtPosition(myItem),\n            columnLabel: this.getColumnLabelAtPosition(myItem)\n        };\n        return event;\n    }\n    registerChartEvents() {\n        const chart = this.wrapper.getChart();\n        this.cli = chart.getChartLayoutInterface ? chart.getChartLayoutInterface() : null;\n        if (this.mouseOver.observers.length > 0) {\n            google.visualization.events.addListener(chart, 'onmouseover', (item) => {\n                const event = this.parseMouseEvent(item);\n                event.tooltip = this.getHTMLTooltip();\n                this.mouseOver.emit(event);\n            });\n        }\n        if (this.mouseOverOneTime.observers.length > 0) {\n            google.visualization.events.addOneTimeListener(chart, 'onmouseover', (item) => {\n                const event = this.parseMouseEvent(item);\n                event.tooltip = this.getHTMLTooltip();\n                this.mouseOverOneTime.emit(event);\n            });\n        }\n        if (this.mouseOut.observers.length > 0) {\n            google.visualization.events.addListener(chart, 'onmouseout', (item) => {\n                const event = this.parseMouseEvent(item);\n                this.mouseOut.emit(event);\n            });\n        }\n        if (this.mouseOutOneTime.observers.length > 0) {\n            google.visualization.events.addOneTimeListener(chart, 'onmouseout', (item) => {\n                const event = this.parseMouseEvent(item);\n                this.mouseOutOneTime.emit(event);\n            });\n        }\n        if (this.data.chartType === 'GeoChart') {\n            if (this.regionClick.observers.length > 0) {\n                google.visualization.events.addListener(chart, 'regionClick', (item) => {\n                    this.regionClick.emit(item);\n                });\n            }\n            if (this.regionClickOneTime.observers.length > 0) {\n                google.visualization.events.addOneTimeListener(chart, 'regionClick', (item) => {\n                    this.regionClick.emit(item);\n                });\n            }\n        }\n    }\n    registerChartWrapperEvents() {\n        google.visualization.events.addListener(this.wrapper, 'ready', () => {\n            this.chartReady.emit({ message: 'Chart ready' });\n        });\n        google.visualization.events.addOneTimeListener(this.wrapper, 'ready', () => {\n            this.chartReadyOneTime.emit({ message: 'Chart ready (one time)' });\n            this.registerChartEvents();\n        });\n        google.visualization.events.addListener(this.wrapper, 'error', (error) => {\n            this.chartError.emit(error);\n        });\n        google.visualization.events.addOneTimeListener(this.wrapper, 'error', (error) => {\n            this.chartErrorOneTime.emit(error);\n        });\n        this.addListener(this.wrapper, 'select', this.selectListener, this.chartSelect);\n        this.addOneTimeListener(this.wrapper, 'select', this.selectListener, this.chartSelectOneTime);\n    }\n    addListener(source, eventType, listenerFn, evEmitter) {\n        google.visualization.events.addListener(source, eventType, () => {\n            evEmitter.emit(listenerFn());\n        });\n    }\n    addOneTimeListener(source, eventType, listenerFn, evEmitter) {\n        google.visualization.events.addOneTimeListener(source, eventType, () => {\n            evEmitter.emit(listenerFn());\n        });\n    }\n    convertOptions() {\n        try {\n            this.options = google.charts[this.data.chartType].convertOptions(this.options);\n        }\n        catch (error) {\n            return;\n        }\n    }\n}\nGoogleChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartComponent, deps: [{ token: i0.ElementRef }, { token: GoogleChartsLoaderService }], target: i0.ɵɵFactoryTarget.Component });\nGoogleChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.14\", type: GoogleChartComponent, selector: \"google-chart\", inputs: { data: \"data\" }, outputs: { chartReady: \"chartReady\", chartReadyOneTime: \"chartReadyOneTime\", chartError: \"chartError\", chartErrorOneTime: \"chartErrorOneTime\", chartSelect: \"chartSelect\", chartSelectOneTime: \"chartSelectOneTime\", mouseOver: \"mouseOver\", mouseOverOneTime: \"mouseOverOneTime\", mouseOut: \"mouseOut\", mouseOutOneTime: \"mouseOutOneTime\", regionClick: \"regionClick\", regionClickOneTime: \"regionClickOneTime\" }, ngImport: i0, template: '<div></div>', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'google-chart',\n                    template: '<div></div>',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: GoogleChartsLoaderService }]; }, propDecorators: { data: [{\n                type: Input\n            }], chartReady: [{\n                type: Output\n            }], chartReadyOneTime: [{\n                type: Output\n            }], chartError: [{\n                type: Output\n            }], chartErrorOneTime: [{\n                type: Output\n            }], chartSelect: [{\n                type: Output\n            }], chartSelectOneTime: [{\n                type: Output\n            }], mouseOver: [{\n                type: Output\n            }], mouseOverOneTime: [{\n                type: Output\n            }], mouseOut: [{\n                type: Output\n            }], mouseOutOneTime: [{\n                type: Output\n            }], regionClick: [{\n                type: Output\n            }], regionClickOneTime: [{\n                type: Output\n            }] } });\n\nclass GoogleChartsDashboardComponent {\n    constructor(el, loaderService) {\n        this.el = el;\n        this.loaderService = loaderService;\n        this.el = el;\n        this.loaderService = loaderService;\n    }\n    ngOnInit() {\n        this.data.component = this;\n        this.init().then(() => {\n            if (!this.dataTable) {\n                this.dataTable = new GoogleChartsDataTable(this.data);\n                this.dataTable.dataTableChanged.subscribe((dt) => {\n                    this._draw();\n                });\n            }\n            this.draw();\n        });\n    }\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.loaderService.load({ packages: ['controls'] });\n            this.dashboard = new google.visualization.Dashboard(this.el.nativeElement.querySelector('div'));\n            for (const b of this.data.bind) {\n                let controls = b[0];\n                let charts = b[1];\n                if (!(controls instanceof Array)) {\n                    controls = [controls];\n                }\n                if (!(charts instanceof Array)) {\n                    charts = [charts];\n                }\n                for (const c of controls) {\n                    yield c.component.ensureInit();\n                }\n                for (const c of charts) {\n                    if (!c.component) {\n                        continue;\n                    }\n                    yield c.component.init();\n                    const data = c.component.data;\n                    if (data.dataTable !== undefined || data.dataSourceUrl !== undefined) {\n                        throw Error('dataTable and dataSourceUrl cannot be specified when ' +\n                            'chart is drawn in a Dashboard');\n                    }\n                }\n                this.dashboard.bind(controls.map(x => x.component.wrapper), charts.map(x => x.component.wrapper));\n            }\n        });\n    }\n    draw(value) {\n        this.dataTable.init(value);\n    }\n    _draw() {\n        this.dashboard.draw(this.dataTable.getDataTable());\n    }\n}\nGoogleChartsDashboardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartsDashboardComponent, deps: [{ token: i0.ElementRef }, { token: GoogleChartsLoaderService }], target: i0.ɵɵFactoryTarget.Component });\nGoogleChartsDashboardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.14\", type: GoogleChartsDashboardComponent, selector: \"google-charts-dashboard\", inputs: { data: \"data\" }, ngImport: i0, template: '<div></div>', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartsDashboardComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'google-charts-dashboard',\n                    template: '<div></div>',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: GoogleChartsLoaderService }]; }, propDecorators: { data: [{\n                type: Input\n            }] } });\n\nclass GoogleChartsControlComponent {\n    constructor(el, loaderService) {\n        this.el = el;\n        this.loaderService = loaderService;\n        this.el = el;\n        this.loaderService = loaderService;\n    }\n    ngOnInit() {\n        this.data.component = this;\n    }\n    ensureInit() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.wrapper) {\n                return;\n            }\n            yield this.loaderService.load({ packages: ['controls'] });\n            let opt;\n            opt = Object.create(this.data);\n            opt.containerId = this.el.nativeElement.querySelector('div');\n            this.wrapper = new google.visualization.ControlWrapper(opt);\n        });\n    }\n}\nGoogleChartsControlComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartsControlComponent, deps: [{ token: i0.ElementRef }, { token: GoogleChartsLoaderService }], target: i0.ɵɵFactoryTarget.Component });\nGoogleChartsControlComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.14\", type: GoogleChartsControlComponent, selector: \"google-charts-control\", inputs: { data: \"data\" }, ngImport: i0, template: '<div></div>', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartsControlComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'google-charts-control',\n                    template: '<div></div>',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: GoogleChartsLoaderService }]; }, propDecorators: { data: [{\n                type: Input\n            }] } });\n\nclass Ng2GoogleChartsModule {\n}\nNg2GoogleChartsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: Ng2GoogleChartsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNg2GoogleChartsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: Ng2GoogleChartsModule, declarations: [GoogleChartComponent,\n        GoogleChartsDashboardComponent,\n        GoogleChartsControlComponent], exports: [GoogleChartComponent,\n        GoogleChartsDashboardComponent,\n        GoogleChartsControlComponent] });\nNg2GoogleChartsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: Ng2GoogleChartsModule, providers: [\n        GoogleChartsLoaderService\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: Ng2GoogleChartsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        GoogleChartComponent,\n                        GoogleChartsDashboardComponent,\n                        GoogleChartsControlComponent,\n                    ],\n                    providers: [\n                        GoogleChartsLoaderService\n                    ],\n                    exports: [\n                        GoogleChartComponent,\n                        GoogleChartsDashboardComponent,\n                        GoogleChartsControlComponent,\n                    ]\n                }]\n        }] });\n\nfunction isComponent(chart) {\n    return chart.wrapper !== undefined;\n}\nclass GoogleChartEditor {\n    constructor(loaderService) {\n        this.loaderService = loaderService;\n    }\n    createEditor() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.chartEditor !== undefined) {\n                return;\n            }\n            yield this.loaderService.load({ packages: ['charteditor'] });\n            this.chartEditor = new google.visualization.ChartEditor();\n            google.visualization.events.addListener(this.chartEditor, 'ok', () => {\n                const wrapper = this.chartEditor.getChartWrapper();\n                this.comp.wrapper = wrapper;\n                this.comp.data.chartType = wrapper.getChartType();\n                if (this.comp.data.options !== undefined || Object.isExtensible(this.comp.data)) {\n                    this.comp.data.options = wrapper.getOptions();\n                }\n                this.comp.wrapper.draw();\n            });\n        });\n    }\n    openDialog(chart, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.createEditor();\n            return new Promise((resolve, reject) => {\n                this.comp = isComponent(chart) ? chart : chart.component;\n                google.visualization.events.addListener(this.chartEditor, 'ok', () => {\n                    resolve(this.comp.wrapper);\n                });\n                google.visualization.events.addListener(this.chartEditor, 'cancel', () => {\n                    reject();\n                });\n                this.chartEditor.openDialog(this.comp.wrapper, options);\n            });\n        });\n    }\n}\nGoogleChartEditor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartEditor, deps: [{ token: GoogleChartsLoaderService }], target: i0.ɵɵFactoryTarget.Injectable });\nGoogleChartEditor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartEditor, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartEditor, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: GoogleChartsLoaderService }]; } });\n\n/*\n * Public API Surface of ng2-google-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ChartHTMLTooltip, GoogleChartComponent, GoogleChartEditor, GoogleChartType, GoogleChartsControlComponent, GoogleChartsDashboardComponent, GoogleChartsLoaderService, Ng2GoogleChartsModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}