{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { of, map, debounceTime, distinctUntilChanged, tap, switchMap, catchError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i3 from \"@angular/forms\";\nfunction WikipediaSearchComponent_Conditional_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"searching...\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction WikipediaSearchComponent_Conditional_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1, \"Sorry, suggestions could not be loaded.\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst WIKI_URL = 'https://en.wikipedia.org/w/api.php';\nconst PARAMS = new HttpParams({\n  fromObject: {\n    action: 'opensearch',\n    format: 'json',\n    origin: '*'\n  }\n});\nexport class WikipediaService {\n  constructor(http) {\n    this.http = http;\n  }\n  search(term) {\n    if (term === '') {\n      return of([]);\n    }\n    return this.http.get(WIKI_URL, {\n      params: PARAMS.set('search', term)\n    }).pipe(map(response => response[1]));\n  }\n  static #_ = this.ɵfac = function WikipediaService_Factory(t) {\n    return new (t || WikipediaService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WikipediaService,\n    factory: WikipediaService.ɵfac\n  });\n}\nexport class WikipediaSearchComponent {\n  constructor(_service) {\n    this._service = _service;\n    this.searching = false;\n    this.searchFailed = false;\n    this.search = text$ => text$.pipe(debounceTime(300), distinctUntilChanged(), tap(() => this.searching = true), switchMap(term => this._service.search(term).pipe(tap(() => this.searchFailed = false), catchError(() => {\n      this.searchFailed = true;\n      return of([]);\n    }))), tap(() => this.searching = false));\n  }\n  static #_ = this.ɵfac = function WikipediaSearchComponent_Factory(t) {\n    return new (t || WikipediaSearchComponent)(i0.ɵɵdirectiveInject(WikipediaService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: WikipediaSearchComponent,\n    selectors: [[\"app-wikipedia-search\"]],\n    features: [i0.ɵɵProvidersFeature([WikipediaService])],\n    decls: 15,\n    vars: 7,\n    consts: [[1, \"card\"], [1, \"card-header\"], [1, \"f-m-light\", \"mt-1\"], [1, \"card-body\"], [\"id\", \"typeahead-http\"], [1, \"theme-form\"], [\"type\", \"text\", \"placeholder\", \"Wikipedia search\", 1, \"typeahead\", \"form-control\", 3, \"ngbTypeahead\"], [\"class\", \"invalid-feedback\"], [1, \"invalid-feedback\"]],\n    template: function WikipediaSearchComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h4\");\n        i0.ɵɵtext(3, \"Wikipedia search\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"p\", 2);\n        i0.ɵɵtext(5, \"A typeahead example that gets values from the \");\n        i0.ɵɵelementStart(6, \"code\");\n        i0.ɵɵtext(7, \"WikipediaService\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(8, \"div\", 3)(9, \"div\", 4)(10, \"form\", 5)(11, \"div\");\n        i0.ɵɵelement(12, \"input\", 6);\n        i0.ɵɵtemplate(13, WikipediaSearchComponent_Conditional_13_Template, 2, 0, \"span\")(14, WikipediaSearchComponent_Conditional_14_Template, 2, 0, \"div\", 7);\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(12);\n        i0.ɵɵclassProp(\"is-invalid\", ctx.searchFailed)(\"is-invalid\", ctx.searchFailed);\n        i0.ɵɵproperty(\"ngbTypeahead\", ctx.search);\n        i0.ɵɵadvance();\n        i0.ɵɵconditional(13, ctx.searching ? 13 : -1);\n        i0.ɵɵadvance();\n        i0.ɵɵconditional(14, ctx.searchFailed ? 14 : -1);\n      }\n    },\n    dependencies: [i2.NgbTypeahead, i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.NgForm],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["HttpParams","of","map","debounceTime","distinctUntilChanged","tap","switchMap","catchError","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","WIKI_URL","PARAMS","fromObject","action","format","origin","WikipediaService","constructor","http","search","term","get","params","set","pipe","response","_","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","WikipediaSearchComponent","_service","searching","searchFailed","text$","ɵɵdirectiveInject","selectors","features","ɵɵProvidersFeature","decls","vars","consts","template","WikipediaSearchComponent_Template","rf","ctx","ɵɵelement","ɵɵtemplate","WikipediaSearchComponent_Conditional_13_Template","WikipediaSearchComponent_Conditional_14_Template","ɵɵadvance","ɵɵclassProp","ɵɵproperty","ɵɵconditional"],"sources":["C:\\Repository\\Jupiter\\juno-app\\src\\app\\components\\forms\\form-widgets\\touchspin\\typeahead\\wikipedia-search\\wikipedia-search.component.ts","C:\\Repository\\Jupiter\\juno-app\\src\\app\\components\\forms\\form-widgets\\touchspin\\typeahead\\wikipedia-search\\wikipedia-search.component.html"],"sourcesContent":["import { HttpParams, HttpClient } from '@angular/common/http';\nimport { Component, Injectable } from '@angular/core';\nimport { of, map, OperatorFunction, Observable, debounceTime, distinctUntilChanged, tap, switchMap, catchError } from 'rxjs';\n\n\nconst WIKI_URL = 'https://en.wikipedia.org/w/api.php';\nconst PARAMS = new HttpParams({\n\tfromObject: {\n\t\taction: 'opensearch',\n\t\tformat: 'json',\n\t\torigin: '*',\n\t},\n});\n\n@Injectable()\nexport class WikipediaService {\n\tconstructor(private http: HttpClient) {}\n\n\tsearch(term: string) {\n\t\tif (term === '') {\n\t\t\treturn of([]);\n\t\t}\n\n\t\treturn this.http\n\t\t\t.get<[any, string[]]>(WIKI_URL, { params: PARAMS.set('search', term) })\n\t\t\t.pipe(map((response) => response[1]));\n\t}\n}\n\n\n@Component({\n  selector: 'app-wikipedia-search',\n  templateUrl: './wikipedia-search.component.html',\n  styleUrls: ['./wikipedia-search.component.scss'],\n  providers: [WikipediaService],\n})\n\nexport class WikipediaSearchComponent {\n\n  searching = false;\n\tsearchFailed = false;\n\n\tconstructor(private _service: WikipediaService) {}\n\n\tsearch: OperatorFunction<string, readonly string[]> = (text$: Observable<string>) =>\n\t\ttext$.pipe(\n\t\t\tdebounceTime(300),\n\t\t\tdistinctUntilChanged(),\n\t\t\ttap(() => (this.searching = true)),\n\t\t\tswitchMap((term) =>\n\t\t\t\tthis._service.search(term).pipe(\n\t\t\t\t\ttap(() => (this.searchFailed = false)),\n\t\t\t\t\tcatchError(() => {\n\t\t\t\t\t\tthis.searchFailed = true;\n\t\t\t\t\t\treturn of([]);\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t),\n\t\t\ttap(() => (this.searching = false)),\n\t\t);\n\n}\n","<div class=\"card\">\n  <div class=\"card-header\">\n    <h4>Wikipedia search</h4>\n    <p class=\"f-m-light mt-1\">A typeahead example that gets values from the <code>WikipediaService</code></p>\n  </div>\n  <div class=\"card-body\">\n    <div id=\"typeahead-http\">\n      <form class=\"theme-form\">\n        <div>\n          <input class=\"typeahead form-control\" type=\"text\" placeholder=\"Wikipedia search\"\n            [class.is-invalid]=\"searchFailed\" [ngbTypeahead]=\"search\" [class.is-invalid]=\"searchFailed\">\n            @if (searching) {\n              <span>searching...</span>\n            }\n            @if (searchFailed) {\n              <div class=\"invalid-feedback\">Sorry, suggestions could not be loaded.</div>\n            }\n        </div>\n      </form>\n    </div>\n  </div>\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}